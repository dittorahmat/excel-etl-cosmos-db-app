name: Deploy Frontend to Azure Static Web App

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'public/**'
      - 'vite.config.ts'
      - 'vitest.server.config.ts'
      - 'package.json'
      - 'package-lock.json'
      - 'index.html'
      - 'staticwebapp.config.json'
      - '.github/workflows/azure-static-web-apps-gray-flower-09b086c00.yml'
  workflow_dispatch:

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - name: Install Node.js and npm
        run: |
          echo "Node.js version: $(node -v)"
          echo "npm version: $(npm -v)"
          
      - name: Install Dependencies
        run: |
          # Install all dependencies including devDependencies
          npm ci --include=dev
          # Explicitly install Vite
          npm install vite@5.4.19 --save-dev
          # Verify Vite installation
          npx vite --version
        working-directory: .
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Build Client
        run: |
          # Debug: Show current directory structure
          echo "Current directory structure:"
          ls -la
          
          # Debug: Show node_modules/vite
          echo "Vite installation:"
          ls -la node_modules | grep vite || echo "Vite not found in node_modules"
          
          # Clear any existing build artifacts
          rm -rf dist
          
          # Build the application
          npx vite build --mode production
          
          # Verify the built CSS files
          find dist -name "*.css" -exec sh -c 'echo "Checking MIME type for $1" && file -b --mime-type "$1" | grep -q "text/css" || (echo "Incorrect MIME type for $1" && exit 1)' _ {} \;
        working-directory: .
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          NODE_ENV: production

      - name: Verify Build Output
        run: |
          ls -la dist/
          echo "Build output verified"
          
      - name: Prepare deployment files
        run: |
          # Create a temporary directory for the deployment
          mkdir -p deployment
          
          # Copy only the necessary files to the deployment directory
          cp -r dist/* deployment/
          
          # Copy only production dependencies
          npm ci --omit=dev
          
          # Copy package files
          cp package.json deployment/
          cp package-lock.json deployment/
          
          # List the files to be deployed
          echo "Files to be deployed:"
          find deployment -type f | sort
          
          # Show the size of the deployment directory
          echo "Deployment directory size:"
          du -sh deployment/
          
          # Move the deployment directory to the root
          mv deployment/* .
          rmdir deployment
          
          # Remove unnecessary files
          rm -rf node_modules
          rm -rf .git
          rm -rf .github
          rm -rf server
          rm -rf tests
          rm -f *.md
          rm -f .*rc
          rm -f *.config.*
          
          echo "Final directory size:"
          du -sh .

      - name: Create staticwebapp.config.json
        run: |
          cat > staticwebapp.config.json << 'EOL'
          {
            "mimeTypes": {
              ".css": "text/css; charset=utf-8"
            },
            "navigationFallback": {
              "rewrite": "/index.html",
              "exclude": ["/assets/*", "/*.*"]
            },
            "responseOverrides": {
              "400": {
                "rewrite": "/index.html"
              },
              "404": {
                "rewrite": "/index.html"
              }
            },
            "globalHeaders": {
              "Content-Security-Policy": "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:; font-src 'self' https: data:; img-src 'self' https: data:; connect-src 'self' https:;",
              "X-Content-Type-Options": "nosniff",
              "X-Frame-Options": "DENY",
              "X-XSS-Protection": "1; mode=block"
            }
          }
          EOL
          
          # Copy the config to the dist directory
          cp staticwebapp.config.json dist/
          
      - name: Deploy to Azure Static Web App
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GRAY_FLOWER_09B086C00 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: 'dist'        # Built app directory
          output_location: ''         # Root of the built app
          skip_app_build: true        # We're building manually above
          skip_api_build: true        # No API in this build
          app_artifact_location: 'dist'
          # Configure for single page application
          
        env:
          VITE_AZURE_CLIENT_ID: ${{ secrets.VITE_AZURE_CLIENT_ID }}
          VITE_AZURE_TENANT_ID: ${{ secrets.VITE_AZURE_TENANT_ID }}
          VITE_AZURE_REDIRECT_URI: ${{ secrets.VITE_AZURE_REDIRECT_URI }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_API_SCOPE: ${{ secrets.VITE_API_SCOPE }}
          VITE_PUBLIC_AZURE_CLIENT_ID: ${{ secrets.VITE_AZURE_CLIENT_ID }}
          VITE_PUBLIC_AZURE_TENANT_ID: ${{ secrets.VITE_AZURE_TENANT_ID }}
          VITE_PUBLIC_AZURE_REDIRECT_URI: ${{ secrets.VITE_AZURE_REDIRECT_URI }}
          VITE_PUBLIC_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_PUBLIC_API_SCOPE: ${{ secrets.VITE_PUBLIC_API_SCOPE }}
          NODE_VERSION: 20.x