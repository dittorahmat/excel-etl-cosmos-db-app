name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  id-token: write
  deployments: write

env:
  NODE_VERSION: '20'
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  AZURE_STATIC_WEB_APP_NAME: ${{ secrets.AZURE_STATIC_WEB_APP_NAME || '' }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP || 'IESR-DB' }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      working-directory: ./
      run: |
        npm ci --include=dev
        npx tsc --version
        npx eslint --version

    - name: Build server
      working-directory: ./
      run: npm run build:server

    - name: Verify build output
      working-directory: ./
      run: |
        echo "Build output structure:"
        find dist -type f | sort
        echo "\nCosmos DB service file exists: $(ls -la dist/server/src/services/cosmos-db/cosmos-db.service.js 2>/dev/null && echo 'Yes' || echo 'No')"

    - name: Run Cosmos DB connection test
      working-directory: ./
      env:
        AZURE_COSMOS_CONNECTION_STRING: ${{ secrets.AZURE_COSMOS_CONNECTION_STRING }}
        AZURE_COSMOS_ENDPOINT: ${{ secrets.AZURE_COSMOS_ENDPOINT }}
        AZURE_COSMOS_KEY: ${{ secrets.AZURE_COSMOS_KEY }}
        AZURE_COSMOS_DATABASE: ${{ secrets.AZURE_COSMOS_DATABASE }}
        AZURE_COSMOS_CONTAINER: ${{ secrets.AZURE_COSMOS_CONTAINER }}
      run: |
        echo "Testing Cosmos DB connection..."
        if [ -z "$AZURE_COSMOS_CONNECTION_STRING" ] && [ -z "$AZURE_COSMOS_ENDPOINT" ]; then
          echo "::error::Either AZURE_COSMOS_CONNECTION_STRING or AZURE_COSMOS_ENDPOINT must be set"
          exit 1
        fi
        if [ -z "$AZURE_COSMOS_CONNECTION_STRING" ] && [ -z "$AZURE_COSMOS_KEY" ]; then
          echo "::error::AZURE_COSMOS_KEY must be set when using AZURE_COSMOS_ENDPOINT"
          exit 1
        fi
        NODE_DEBUG=cosmos* npx tsx server/scripts/test-cosmos-connection.ts

    - name: Lint codebase
      working-directory: ./
      run: npm run lint

    - name: Run frontend tests
      working-directory: ./
      run: npm run test:client

    - name: Run backend tests
      working-directory: ./
      run: npm run test:server

    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json,./server/coverage/coverage-final.json
        fail_ci_if_error: false

  deploy-frontend:
    name: Deploy Frontend
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Minimal Step
        run: echo "Minimal frontend deployment step"

  deploy-backend:
    name: Deploy Backend
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      working-directory: ./
      run: npm ci --production=false

    - name: Build backend
      working-directory: ./
      run: npm run build:server || { echo 'Backend build failed'; exit 1; }

    - name: Prepare deployment package
      working-directory: ./
      run: |
        mkdir -p deployment
        cp -r dist/server/* deployment/
        cp server/package.json deployment/
        cat <<EOF > deployment/web.config
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <webSocket enabled="false" />
            <handlers>
              <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
            </handlers>
            <rewrite>
              <rules>
                <rule name="DynamicContent">
                  <match url="/*" />
                  <action type="Rewrite" url="dist/server.js" />
                </rule>
              </rules>
            </rewrite>
            <security>
              <requestFiltering removeServerHeader="true" />
            </security>
          </system.webServer>
        </configuration>
        EOF
        cd deployment && npm install --omit=dev --prefer-offline --no-audit --progress=false

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
        package: ./deployment
        slot-name: production

    - name: Document Manual Configuration
      if: always()
      run: |
        echo 'After deployment, please configure the following in Azure Portal:'
        echo '1. Go to your App Service -> Configuration -> Application settings'
        echo '   - Add/Update these settings:'
        echo '     - PORT = 8080'
        echo '     - NODE_ENV = production'
        echo '     - WEBSITE_NODE_DEFAULT_VERSION = ~20'
        echo '     - SCM_DO_BUILD_DURING_DEPLOYMENT = false'
        echo '2. Go to CORS and add allowed origin: https://*.azurestaticapps.net'

    - name: Check for monitoring secrets
      id: check_monitoring_secrets
      run: |
        if [ -n "${{ secrets.AZURE_WEBAPP_RESOURCE_ID }}" ] && [ -n "${{ secrets.AZURE_RESOURCE_GROUP }}" ]; then
          echo "has_secrets=true" >> $GITHUB_OUTPUT
        else
          echo "has_secrets=false" >> $GITHUB_OUTPUT
        fi

    - name: Document Monitoring Setup
      if: always()
      run: |
        echo 'To set up monitoring in Azure Portal:'
        echo '1. Go to your App Service -> Monitoring -> Alerts'
        echo '2. Click "New alert rule"'
        echo '3. Select a metric like "Http 2xx" or "Requests"'
        echo '4. Set appropriate conditions and actions'
        echo '5. Review and create the alert'
        echo 'Note: This step is optional and can be configured in Azure Portal as needed.'

    - name: Skip monitoring setup (missing secrets)
      if: always() && steps.check_monitoring_secrets.outputs.has_secrets != 'true'
      run: |
        echo "Skipping monitoring setup: Required secrets not configured"
