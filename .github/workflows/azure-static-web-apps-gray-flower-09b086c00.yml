name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  id-token: write
  deployments: write

env:
  NODE_VERSION: '20'
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  AZURE_STATIC_WEB_APP_NAME: ${{ secrets.AZURE_STATIC_WEB_APP_NAME || '' }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP || 'IESR-DB' }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --include=dev
        npx tsc --version
        npx eslint --version

    - name: Build server
      run: |
        # Build the server
        npm run build:server
        # Verify the build output structure
        echo "Build output structure:"
        find dist -type f | sort

    - name: Verify build output
      run: |
        echo -e "\nChecking for Cosmos DB test script..."
        if [ -f "server/scripts/test-cosmos-direct.ts" ]; then
          echo "✅ Found TypeScript Cosmos DB direct test script"
          ls -la server/scripts/
        else
          echo "❌ Cosmos DB direct test script not found"
          exit 1
        fi

    - name: Run Cosmos DB connection test
      working-directory: .
      env:
        NODE_OPTIONS: --experimental-vm-modules
        COSMOS_ENDPOINT: ${{ secrets.AZURE_COSMOS_ENDPOINT }}
        COSMOS_KEY: ${{ secrets.AZURE_COSMOS_KEY }}
        COSMOS_DATABASE: ${{ secrets.AZURE_COSMOS_DATABASE }}
        COSMOS_CONTAINER: ${{ secrets.AZURE_COSMOS_CONTAINER }}
      run: |
        echo "Testing Cosmos DB connection..."
        echo "- COSMOS_ENDPOINT: ${COSMOS_ENDPOINT:-Not set}"
        echo "- COSMOS_DATABASE: ${COSMOS_DATABASE:-Not set}"
        echo "- COSMOS_CONTAINER: ${COSMOS_CONTAINER:-Not set}"
        echo "- COSMOS_KEY: ${COSMOS_KEY:+set (hidden for security)}"

        # Check for required environment variables
        if [ -z "$COSMOS_ENDPOINT" ] || [ -z "$COSMOS_KEY" ]; then
          echo "::error::Missing required environment variables: COSMOS_ENDPOINT and/or COSMOS_KEY"
          exit 1
        fi

        # Run the TypeScript test script directly
        echo -e "\nRunning TypeScript Cosmos DB direct connection test..."
        npx tsx server/scripts/test-cosmos-direct.ts

    - name: Lint codebase
      working-directory: ./
      run: npm run lint

    - name: Run frontend tests
      working-directory: ./
      run: npm run test:client

    - name: Run backend tests
      working-directory: ./
      run: npm run test:server

    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json,./server/coverage/coverage-final.json
        fail_ci_if_error: false

  deploy-frontend:
    name: Deploy Frontend to Static Web App
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install and Build Frontend
        env:
          VITE_AZURE_CLIENT_ID: ${{ secrets.VITE_AZURE_CLIENT_ID }}
          VITE_AZURE_TENANT_ID: ${{ secrets.VITE_AZURE_TENANT_ID }}
          VITE_AZURE_REDIRECT_URI: ${{ secrets.VITE_AZURE_REDIRECT_URI || 'https://gray-flower-09b086c00.6.azurestaticapps.net' }}
          VITE_API_SCOPE: ${{ secrets.VITE_API_SCOPE }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'https://exceletlfunc-jpnmx4ye.azurewebsites.net' }}
        run: |
          npm ci
          npm run build:client
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GRAY_FLOWER_09B086C00 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "dist"

  deploy-backend:
    name: Deploy Backend to App Service
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install and Build Backend
        working-directory: ./server
        run: |
          npm ci
          npm run build
          
      - name: Prepare deployment package
        run: |
          echo "Preparing deployment package..."
          
          # Create deployment directory
          mkdir -p deployment
          
          # Verify the dist directory structure
          echo "Build output structure:"
          find dist -type f | sort
          
          # Copy built files from dist/server
          echo "Copying built files..."
          cp -r dist/server/* deployment/
          
          # Copy package.json and install production dependencies
          echo "Setting up Node.js dependencies..."
          cp server/package.json deployment/
          cp server/package-lock.json deployment/ 2>/dev/null || echo "No package-lock.json found"
          
          # Install only production dependencies
          cd deployment
          echo "Installing production dependencies..."
          npm ci --omit=dev
          
          # Verify the deployment package structure
          echo "Final deployment package structure:"
          find . -type f | sort
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: deployment
          
      - name: Configure App Service
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Set the startup command
            az webapp config set --name ${{ secrets.AZURE_WEBAPP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --startup-file "node dist/server.js"
            
            # Set the Node.js version
            az webapp config appsettings set --name ${{ secrets.AZURE_WEBAPP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --settings \
                WEBSITE_NODE_DEFAULT_VERSION=20.19.1 \
                NODE_ENV=production
      
      - name: Update App Settings
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Set environment variables for the App Service
            az webapp config appsettings set --name ${{ secrets.AZURE_WEBAPP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --settings \
                WEBSITE_RUN_FROM_PACKAGE=0 \
                SCM_DO_BUILD_DURING_DEPLOYMENT=1 \
                PORT=8080 \
                NODE_ENV=production \
                AUTH_ENABLED=true \
                AZURE_COSMOS_ENDPOINT=${{ secrets.AZURE_COSMOS_ENDPOINT }} \
                AZURE_COSMOS_KEY="${{ secrets.AZURE_COSMOS_KEY }}" \
                AZURE_COSMOS_DATABASE=${{ secrets.AZURE_COSMOS_DATABASE }} \
                AZURE_COSMOS_CONTAINER=${{ secrets.AZURE_COSMOS_CONTAINER }} \
                AZURE_COSMOS_PARTITION_KEY=/_partitionKey \
                AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
                AZURE_STORAGE_CONTAINER=excel-uploads \
                ALLOWED_ORIGINS="https://gray-flower-09b086c00.6.azurestaticapps.net,http://localhost:3000,http://localhost:5173" \
                FILE_SIZE_LIMIT=10485760 \
                LOG_LEVEL=info
                
            # Verify the deployment structure
            echo "Verifying deployment structure..."
            az webapp list --query "[?name=='${{ secrets.AZURE_WEBAPP_NAME }}'].defaultHostName" -o tsv | xargs -I {} curl -s -o /dev/null -w "%{http_code}" https://{}/api/health || echo "Health check failed"