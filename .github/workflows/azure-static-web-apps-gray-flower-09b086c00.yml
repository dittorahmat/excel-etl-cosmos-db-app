name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  id-token: write
  deployments: write

env:
  NODE_VERSION: '20'
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  AZURE_STATIC_WEB_APP_NAME: ${{ secrets.AZURE_STATIC_WEB_APP_NAME || '' }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP || 'IESR-DB' }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --include=dev
        npx tsc --version
        npx eslint --version

    - name: Build server
      run: |
        # Build the server
        npm run build:server
        # Verify the build output structure
        echo "Build output structure:"
        find dist -type f | sort

    - name: Verify build output
      run: |
        echo -e "\nChecking for Cosmos DB test script..."
        if [ -f "server/scripts/test-cosmos-direct.ts" ]; then
          echo "✅ Found TypeScript Cosmos DB direct test script"
          ls -la server/scripts/
        else
          echo "❌ Cosmos DB direct test script not found"
          exit 1
        fi

    - name: Run Cosmos DB connection test
      working-directory: .
      env:
        NODE_OPTIONS: --experimental-vm-modules
        COSMOS_ENDPOINT: ${{ secrets.AZURE_COSMOS_ENDPOINT }}
        COSMOS_KEY: ${{ secrets.AZURE_COSMOS_KEY }}
        COSMOS_DATABASE: ${{ secrets.AZURE_COSMOS_DATABASE }}
        COSMOS_CONTAINER: ${{ secrets.AZURE_COSMOS_CONTAINER }}
      run: |
        echo "Testing Cosmos DB connection..."
        echo "- COSMOS_ENDPOINT: ${COSMOS_ENDPOINT:-Not set}"
        echo "- COSMOS_DATABASE: ${COSMOS_DATABASE:-Not set}"
        echo "- COSMOS_CONTAINER: ${COSMOS_CONTAINER:-Not set}"
        echo "- COSMOS_KEY: ${COSMOS_KEY:+set (hidden for security)}"

        # Check for required environment variables
        if [ -z "$COSMOS_ENDPOINT" ] || [ -z "$COSMOS_KEY" ]; then
          echo "::error::Missing required environment variables: COSMOS_ENDPOINT and/or COSMOS_KEY"
          exit 1
        fi

        # Run the TypeScript test script directly
        echo -e "\nRunning TypeScript Cosmos DB direct connection test..."
        npx tsx server/scripts/test-cosmos-direct.ts

    - name: Lint codebase
      working-directory: ./
      run: npm run lint

    - name: Run frontend tests
      working-directory: ./
      run: npm run test:client

    - name: Run backend tests
      working-directory: ./
      run: npm run test:server

    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json,./server/coverage/coverage-final.json
        fail_ci_if_error: false

  deploy-frontend:
    name: Deploy Frontend to Static Web App
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install and Build Frontend
        env:
          VITE_AZURE_CLIENT_ID: ${{ secrets.VITE_AZURE_CLIENT_ID }}
          VITE_AZURE_TENANT_ID: ${{ secrets.VITE_AZURE_TENANT_ID }}
          VITE_AZURE_REDIRECT_URI: ${{ secrets.VITE_AZURE_REDIRECT_URI || 'https://gray-flower-09b086c00.6.azurestaticapps.net' }}
          VITE_API_SCOPE: ${{ secrets.VITE_API_SCOPE }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'https://excel-etl-backend-378680.azurewebsites.net' }}
        run: |
          npm ci
          npm run build:client
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GRAY_FLOWER_09B086C00 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "dist"

  deploy-backend:
    name: Deploy Backend to App Service
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install build dependencies
        working-directory: ./server
        run: |
          # Install production dependencies first
          npm ci --production=false
          
          # Install TypeScript and required type definitions
          echo "Installing TypeScript and type definitions..."
          npm install --save-dev typescript @types/node @types/uuid @types/cors @types/multer @types/express @types/xlsx @types/node-fetch
          
          # Verify TypeScript installation
          npx tsc --version
          
      - name: Build and package server
        working-directory: ./server
        env:
          NODE_ENV: production
        run: |
          # Debug: Show environment info
          echo "=== Debug Information ==="
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          # Debug: Show package.json
          echo -e "\n=== package.json ==="
          cat package.json
          
          # Clean any previous builds
          echo -e "\n=== Cleaning previous builds ==="
          rm -rf dist deployment
          
          # Install all dependencies including devDependencies for building
          echo -e "\n=== Installing dependencies ==="
          npm ci
          
          # Debug: Verify TypeScript installation
          echo -e "\n=== TypeScript Check ==="
          echo "Node modules directory contents:"
          ls -la node_modules/
          echo -e "\nTypeScript in package.json: $(grep '"typescript"' package.json || echo 'Not found')"
          echo -e "\nLocal TypeScript version:"
          ./node_modules/.bin/tsc --version || echo "Local tsc not found"
          echo -e "\nGlobal TypeScript version:"
          npx tsc --version || echo "npx tsc not found"
          
          # Install TypeScript if not found
          if ! [ -f "./node_modules/.bin/tsc" ]; then
            echo -e "\n=== Installing TypeScript locally ==="
            npm install --save-dev typescript
          fi
          
          # Build the project
          echo -e "\n=== Building server ==="
          echo "Running: npx tsc --outDir ./dist"
          npx tsc --outDir ./dist || {
            echo "Build failed. Node modules content:"
            ls -la node_modules/
            echo -e "\nTypeScript files in node_modules:"
            find node_modules -name 'tsc' -o -name 'typescript'
            exit 1
          }
          
          # Verify the build output
          echo -e "\n=== Build output ==="
          echo "Build output structure:"
          find dist -type f | sort || echo "No build output found"
          
          # Create deployment directory
          echo -e "\n=== Creating deployment package ==="
          mkdir -p deployment
          
          # Copy built files
          echo "Copying build output..."
          cp -r dist deployment/
          
          # Copy package files
          echo "Copying package files..."
          cp package*.json deployment/
          
          # Install production dependencies
          echo -e "\nInstalling production dependencies..."
          cd deployment
          npm ci --only=production
          
          # Set up start command for Azure
          echo -e "\n=== Configuring Azure startup ==="
          echo '{"scripts": {"start": "node dist/server/src/server.js"}}' > package.json
          
          # Create zip file
          cd ..
          echo -e "\n=== Creating deployment package ==="
          zip -r ../deployment.zip deployment/*
          
          echo -e "\n=== Deployment package created ==="
          ls -lh ../deployment.zip

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'excel-etl-backend-378680'
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./deployment.zip
          # Disable Oryx build since we're deploying pre-built code
          start-deployment: true
          enable-oryx-build: false

      - name: Configure Azure Web App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Set Node.js version and startup command
            az webapp config appsettings set \
              --name excel-etl-backend-378680 \
              --resource-group IESR-DB \
              --settings \
                WEBSITES_PORT=8181 \
                PORT=8181 \
                NODE_ENV=production \
                SCM_DO_BUILD_DURING_DEPLOYMENT=1 \
                WEBSITE_RUN_FROM_PACKAGE=0
                
            # Set the startup command
            az webapp config set \
              --name excel-etl-backend-378680 \
              --resource-group IESR-DB \
              --startup-file "node dist/server/src/server.js"
            
            # Restart the app to apply all settings
            az webapp restart \
              --name excel-etl-backend-378680 \
              --resource-group IESR-DB

      - name: Verify deployment
        run: |
          echo "✅ Deployment completed successfully!"
          echo ""
          echo "1. Go to Azure Portal -> Your App Service -> Configuration"
          echo "2. Under 'Application settings', add/update these settings:"
          echo "   - WEBSITE_RUN_FROM_PACKAGE = 0"
          echo "   - SCM_DO_BUILD_DURING_DEPLOYMENT = 1"
          echo "   - NODE_ENV = production"
          echo "   - PORT = 8080"
          echo "   - AUTH_ENABLED = true"
          echo "   - AZURE_COSMOS_ENDPOINT = [Your Cosmos DB Endpoint]"
          echo "   - AZURE_COSMOS_KEY = [Your Cosmos DB Key]"
          echo "   - AZURE_COSMOS_DATABASE = [Your Database Name]"
          echo "   - AZURE_COSMOS_CONTAINER = [Your Container Name]"
          echo "   - AZURE_STORAGE_CONNECTION_STRING = [Your Storage Connection String]"
          echo "   - AZURE_STORAGE_CONTAINER = excel-uploads"
          echo "   - ALLOWED_ORIGINS = https://gray-flower-09b086c00.6.azurestaticapps.net,http://localhost:3000,http://localhost:5173"
          echo "   - FILE_SIZE_LIMIT = 10485760"
          echo "   - LOG_LEVEL = info"
          echo ""
          echo "3. Under 'Configuration' -> 'General settings':"
          echo "   - Set 'Startup Command' to: node dist/server.js"
          echo "   - Set 'Node version' to: 20-lts"
          echo ""
          echo "4. Save the settings and restart your app"
          echo ""
          echo "🌐 Your app should now be available at: https://excel-etl-backend-378680.azurewebsites.net"