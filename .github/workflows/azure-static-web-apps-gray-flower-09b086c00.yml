name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  id-token: write
  deployments: write

env:
  NODE_VERSION: '20'
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  AZURE_STATIC_WEB_APP_NAME: ${{ secrets.AZURE_STATIC_WEB_APP_NAME || '' }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP || 'IESR-DB' }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      working-directory: ./
      run: |
        npm ci --include=dev
        npx tsc --version
        npx eslint --version

    - name: Build server
      working-directory: ./
      run: npm run build:server

    - name: Verify build output
      working-directory: ./
      run: |
        echo "Build output structure:"
        find dist -type f | sort
        echo "\nCosmos DB service file exists: $(ls -la dist/server/src/services/cosmos-db/cosmos-db.service.js 2>/dev/null && echo 'Yes' || echo 'No')"

    - name: Run Cosmos DB connection test
      working-directory: ./
      env:
        # Use connection string instead of separate variables for better reliability
        AZURE_COSMOS_CONNECTION_STRING: ${{ secrets.AZURE_COSMOS_CONNECTION_STRING }}
        # Fallback to individual variables if connection string is not available
        AZURE_COSMOS_ENDPOINT: ${{ secrets.AZURE_COSMOS_ENDPOINT }}
        AZURE_COSMOS_KEY: ${{ secrets.AZURE_COSMOS_KEY }}
        AZURE_COSMOS_DATABASE: ${{ secrets.AZURE_COSMOS_DATABASE }}
        AZURE_COSMOS_CONTAINER: ${{ secrets.AZURE_COSMOS_CONTAINER }}
      run: |
        echo "Testing Cosmos DB connection..."
        echo "- AZURE_COSMOS_CONNECTION_STRING: ${AZURE_COSMOS_CONNECTION_STRING:0:20}..."
        echo "- AZURE_COSMOS_ENDPOINT: ${AZURE_COSMOS_ENDPOINT:0:20}..."
        echo "- AZURE_COSMOS_DATABASE: ${AZURE_COSMOS_DATABASE:-Not set}"
        echo "- AZURE_COSMOS_CONTAINER: ${AZURE_COSMOS_CONTAINER:-Not set}"
        echo "- AZURE_COSMOS_KEY: ${AZURE_COSMOS_KEY:+set (hidden for security)}"
        
        # Verify required environment variables
        if [ -z "$AZURE_COSMOS_CONNECTION_STRING" ] && [ -z "$AZURE_COSMOS_ENDPOINT" ]; then
          echo "::error::Either AZURE_COSMOS_CONNECTION_STRING or AZURE_COSMOS_ENDPOINT must be set"
          exit 1
        fi
        
        if [ -z "$AZURE_COSMOS_CONNECTION_STRING" ] && [ -z "$AZURE_COSMOS_KEY" ]; then
          echo "::error::AZURE_COSMOS_KEY must be set when using AZURE_COSMOS_ENDPOINT"
          exit 1
        fi
        
        # Run the test script with debugging
        NODE_DEBUG=cosmos* npx tsx server/scripts/test-cosmos-connection.ts

    - name: Lint codebase
      working-directory: ./
      run: npm run lint

    - name: Run frontend tests
      working-directory: ./
      run: npm run test:client

    - name: Run backend tests
      working-directory: ./
      run: npm run test:server

    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json,./server/coverage/coverage-final.json
        fail_ci_if_error: false

  deploy-frontend:
    name: Deploy Frontend
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    # Add environment variables that will be available to all steps
    env:
      VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
      VITE_AZURE_CLIENT_ID: ${{ secrets.VITE_AZURE_CLIENT_ID }}
      VITE_AZURE_TENANT_ID: ${{ secrets.VITE_AZURE_TENANT_ID }}
      VITE_AZURE_REDIRECT_URI: ${{ secrets.VITE_AZURE_REDIRECT_URI || 'https://gray-flower-09b086c00.6.azurestaticapps.net' }}
      VITE_AZURE_SCOPES: ${{ secrets.VITE_AZURE_SCOPES || 'User.Read openid profile email' }}

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install dependencies
      run: npm ci
      
    - name: Generate config
      run: npm run generate:config
      
    - name: Verify environment setup
      run: |
        echo "Build will use these environment variables from Azure:"
        echo "- VITE_AZURE_CLIENT_ID: $([ -z "$VITE_AZURE_CLIENT_ID" ] && echo 'Will use Azure Portal setting' || echo 'Set in workflow')"
        echo "- VITE_AZURE_TENANT_ID: $([ -z "$VITE_AZURE_TENANT_ID" ] && echo 'Will use Azure Portal setting' || echo 'Set in workflow')"
        echo "- VITE_AZURE_REDIRECT_URI: $([ -z "$VITE_AZURE_REDIRECT_URI" ] && echo 'Will use Azure Portal setting' || echo 'Set in workflow')"
      

    - name: Check for deployment token
      id: check_token
      run: |
        # Check for either token format
        if [ -n "${{ secrets.AZURE_STATIC_WEB_APPS_TOKEN }}${secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GRAY_FLOWER_09B086C00 }" ]; then
          echo "has_token=true" >> $GITHUB_OUTPUT
          echo "token_found=true" >> $GITHUB_STATE
        else
          echo "::warning::No deployment token found. Please add AZURE_STATIC_WEB_APPS_TOKEN or AZURE_STATIC_WEB_APPS_API_TOKEN_GRAY_FLOWER_09B086C00 to GitHub Secrets"
          echo "has_token=false" >> $GITHUB_OUTPUT
          echo "token_found=false" >> $GITHUB_STATE
        fi

    - name: Build and Deploy to Azure Static Web App
      id: builddeploy
      uses: Azure/static-web-apps-deploy@v1
      with:
        # Try both possible token names, with fallback to empty string
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_TOKEN || secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GRAY_FLOWER_09B086C00 || '' }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: 'upload'
        app_location: '/'
        output_location: 'dist'
        skip_app_build: false
        verbose: true
        # Skip deployment if no token is provided
        skip_deploy_on_missing_secrets: true
        # Pass environment variables to the build process
        app_build_command: 'npm run build:client'
        # Ensure the build process has access to environment variables
        env: production
      # Pass environment variables to the build step
      env:
        # Azure deployment token (tries both possible names)
        DEPLOYMENT_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_TOKEN || secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GRAY_FLOWER_09B086C00 }}
        # Application environment variables
        VITE_AZURE_TENANT_ID: ${{ secrets.VITE_AZURE_TENANT_ID }}
        VITE_AZURE_CLIENT_ID: ${{ secrets.VITE_AZURE_CLIENT_ID }}
        VITE_AZURE_REDIRECT_URI: ${{ secrets.VITE_AZURE_REDIRECT_URI || 'https://gray-flower-09b086c00.6.azurestaticapps.net' }}
        VITE_AZURE_SCOPES: ${{ secrets.VITE_AZURE_SCOPES || 'User.Read openid profile email' }}

    - name: Skip deployment (no token)
      if: steps.check_token.outputs.has_token != 'true'
      run: |
        echo "Skipping deployment: AZURE_STATIC_WEB_APPS_TOKEN secret not set"
        echo "To enable deployment, add the AZURE_STATIC_WEB_APPS_TOKEN secret to your repository settings"

  deploy-backend:
    name: Deploy Backend
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      working-directory: ./
      run: npm ci --production=false

    - name: Build backend
      working-directory: ./
      run: npm run build:server
      env:
        NODE_ENV: production

    - name: Prepare deployment package
      working-directory: ./
      run: |
        mkdir -p deployment
        # Copy the built server files from dist/server to deployment
        cp -r dist/server/* deployment/
        # Copy package.json from the server directory
        cp server/package.json deployment/
        # Copy web.config for Azure App Service
        echo '<?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <webSocket enabled="false" />
            <handlers>
              <add name="iisnode" path="dist/server.js" verb="*" modules="iisnode" />
            </handlers>
            <rewrite>
              <rules>
                <rule name="DynamicContent">
                  <match url="/*" />
                  <action type="Rewrite" url="dist/server.js" />
                </rule>
              </rules>
            </rewrite>
            <security>
              <requestFiltering removeServerHeader="true" />
            </security>
          </system.webServer>
        </configuration>' > deployment/web.config
        # Install production dependencies only (no devDependencies)
        cd deployment && npm install --omit=dev --prefer-offline --no-audit --progress=false

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
        package: ./deployment
        slot-name: production

    - name: Document Manual Configuration
      run: |
        echo 'After deployment, please configure the following in Azure Portal:'
        echo '1. Go to your App Service -> Configuration -> Application settings'
        echo '   - Add/Update these settings:'
        echo '     - PORT = 8080'
        echo '     - NODE_ENV = production'
        echo '     - WEBSITE_NODE_DEFAULT_VERSION = ~20'
        echo '     - SCM_DO_BUILD_DURING_DEPLOYMENT = false'
        echo '2. Go to CORS and add allowed origin: https://*.azurestaticapps.net'
      if: always()

    - name: Check for monitoring secrets
      id: check_monitoring_secrets
      run: |
        if [ -n "${{ secrets.AZURE_WEBAPP_RESOURCE_ID }}" ] && [ -n "${{ secrets.AZURE_RESOURCE_GROUP }}" ]; then
          echo "has_secrets=true" >> $GITHUB_OUTPUT
        else
          echo "has_secrets=false" >> $GITHUB_OUTPUT
        fi

    - name: Document Monitoring Setup
      run: |
        echo 'To set up monitoring in Azure Portal:'
        echo '1. Go to your App Service -> Monitoring -> Alerts'
        echo '2. Click "New alert rule"'
        echo '3. Select a metric like "Http 2xx" or "Requests"'
        echo '4. Set appropriate conditions and actions'
        echo '5. Review and create the alert'
        echo 'Note: This step is optional and can be configured in Azure Portal as needed.'
      if: always()

    - name: Skip monitoring setup (missing secrets)
      if: always() && steps.check_monitoring_secrets.outputs.has_secrets != 'true'
      run: |
        echo "Skipping monitoring setup: Required secrets not configured"
        echo "To enable monitoring, ensure AZURE_WEBAPP_RESOURCE_ID and AZURE_RESOURCE_GROUP secrets are set"
