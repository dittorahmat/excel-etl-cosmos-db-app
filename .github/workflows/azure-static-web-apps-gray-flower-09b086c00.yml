name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  id-token: write
  deployments: write

env:
  NODE_VERSION: '20'
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  AZURE_STATIC_WEB_APP_NAME: ${{ secrets.AZURE_STATIC_WEB_APP_NAME || '' }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP || 'IESR-DB' }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --include=dev
        npx tsc --version
        npx eslint --version

    - name: Build server
      run: |
        # Build the server
        npm run build:server
        # Verify the build output structure
        echo "Build output structure:"
        find dist -type f | sort

    - name: Verify build output
      run: |
        echo -e "\nChecking for Cosmos DB test script..."
        if [ -f "server/scripts/test-cosmos-direct.ts" ]; then
          echo "✅ Found TypeScript Cosmos DB direct test script"
          ls -la server/scripts/
        else
          echo "❌ Cosmos DB direct test script not found"
          exit 1
        fi

    - name: Run Cosmos DB connection test
      working-directory: .
      env:
        NODE_OPTIONS: --experimental-vm-modules
        COSMOS_ENDPOINT: ${{ secrets.AZURE_COSMOS_ENDPOINT }}
        COSMOS_KEY: ${{ secrets.AZURE_COSMOS_KEY }}
        COSMOS_DATABASE: ${{ secrets.AZURE_COSMOS_DATABASE }}
        COSMOS_CONTAINER: ${{ secrets.AZURE_COSMOS_CONTAINER }}
      run: |
        echo "Testing Cosmos DB connection..."
        echo "- COSMOS_ENDPOINT: ${COSMOS_ENDPOINT:-Not set}"
        echo "- COSMOS_DATABASE: ${COSMOS_DATABASE:-Not set}"
        echo "- COSMOS_CONTAINER: ${COSMOS_CONTAINER:-Not set}"
        echo "- COSMOS_KEY: ${COSMOS_KEY:+set (hidden for security)}"

        # Check for required environment variables
        if [ -z "$COSMOS_ENDPOINT" ] || [ -z "$COSMOS_KEY" ]; then
          echo "::error::Missing required environment variables: COSMOS_ENDPOINT and/or COSMOS_KEY"
          exit 1
        fi

        # Run the TypeScript test script directly
        echo -e "\nRunning TypeScript Cosmos DB direct connection test..."
        npx tsx server/scripts/test-cosmos-direct.ts

    - name: Lint codebase
      working-directory: ./
      run: npm run lint

    - name: Run frontend tests
      working-directory: ./
      run: npm run test:client

    - name: Run backend tests
      working-directory: ./
      run: npm run test:server

    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json,./server/coverage/coverage-final.json
        fail_ci_if_error: false

  deploy-frontend:
    name: Deploy Frontend to Static Web App
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install and Build Frontend
        env:
          VITE_AZURE_CLIENT_ID: ${{ secrets.VITE_AZURE_CLIENT_ID }}
          VITE_AZURE_TENANT_ID: ${{ secrets.VITE_AZURE_TENANT_ID }}
          VITE_AZURE_REDIRECT_URI: ${{ secrets.VITE_AZURE_REDIRECT_URI || 'https://gray-flower-09b086c00.6.azurestaticapps.net' }}
          VITE_API_SCOPE: ${{ secrets.VITE_API_SCOPE }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'https://exceletlfunc-jpnmx4ye.azurewebsites.net' }}
        run: |
          npm ci
          npm run build:client
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GRAY_FLOWER_09B086C00 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "dist"

  deploy-backend:
    name: Deploy Backend to App Service
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install and Build Backend
        working-directory: ./server
        run: |
          # Install all dependencies including dev dependencies for build
          npm ci
          
          # Build the project
          echo "Building TypeScript project..."
          npm run build
          
          # Verify the build output
          echo "Build output structure:"
          find ../dist -type f | sort
      
      - name: Create deployment package
        run: |
          echo "=== Creating deployment package ==="
          
          # Create clean deployment directory
          rm -rf deployment
          mkdir -p deployment
          
          # Show the build output structure for debugging
          echo "=== Build output structure ==="
          find dist -type f | sort
          
          # Create the correct directory structure in the deployment package
          echo "=== Creating deployment directory structure ==="
          mkdir -p deployment/dist/server/src
          
          # Copy built files to the correct location
          echo "=== Copying built files ==="
          cp -r dist/server/server/src/* deployment/dist/server/src/
          
          # Copy package.json and update it
          echo "=== Preparing package.json ==="
          cp server/package.json deployment/
          cd deployment
          
          # Update package.json with correct configuration
          echo "=== Updating package.json configuration ==="
          jq '{
            name: .name,
            version: .version,
            description: .description,
            main: "dist/server/src/server.js",
            type: "module",
            scripts: {
              start: "node --enable-source-maps dist/server/src/server.js",
              test: .scripts.test
            },
            engines: {
              node: ">=16.0.0"
            },
            dependencies: (.dependencies + {
              "dotenv": "^16.4.4",
              "winston": "^3.11.0",
              "jwks-rsa": "^3.0.1",
              "express": "^4.18.2",
              "cors": "^2.8.5",
              "helmet": "^7.1.0",
              "express-rate-limit": "^7.2.0",
              "express-validator": "^7.0.1",
              "jsonwebtoken": "^9.0.2",
              "multer": "^1.4.5-lts.1"
            } | with_entries(select(.value != null))),
            private: true
          }' package.json > package.tmp.json && mv package.tmp.json package.json
          
          # Create a startup command file for Azure
          echo '#!/bin/bash
          echo "Starting application with PORT: $PORT"
          node --enable-source-maps dist/server/src/server.js' > startup.sh
          chmod +x startup.sh
          
          # Install production dependencies
          echo "=== Installing production dependencies ==="
          npm install --omit=dev --prefer-offline --no-audit --progress=false
          
          # Verify installation
          echo "=== Verifying installation ==="
          npm ls --omit=dev
          
          # Show final directory structure
          echo "=== Final deployment structure ==="
          find . -type f | sort
          
          # Log the final package.json for verification
          echo "=== Final package.json ==="
          cat package.json
          
          # Go back to the root directory
          cd ..
          
          # Verify the deployment package structure
          echo "Final deployment package structure:"
          find . -type f | sort
          
          # Verify required dependencies are installed
          echo "\nVerifying required dependencies are installed..."
          for dep in dotenv jwks-rsa jsonwebtoken winston; do
            if [ -d "node_modules/$dep" ]; then
              echo "✅ $dep is installed"
            else
              echo "❌ $dep is MISSING - attempting to install..."
              npm install $dep --save --no-package-lock --no-save
            fi
          done
          
          # Diagnostic logging
          echo "\n=== Directory Structure ==="
          find /home/site/wwwroot -type f -name "*.js" | sort
          echo "=========================="
          
          echo "\n=== Checking winston installation ==="
          ls -la /home/site/wwwroot/node_modules/winston || echo "winston not found"
          echo "===================================="
          
          echo "\n=== Environment Variables ==="
          printenv | sort
          echo "============================"
          
          echo "\n=== Current working directory and files ==="
          pwd
          ls -la
          echo "\n=== dist directory contents ==="
          ls -la dist/ || echo "dist/ not found"
          echo "\n=== server directory contents ==="
          ls -la dist/server/ || echo "dist/server/ not found"
          echo "\n=== src directory contents ==="
          ls -la dist/server/server/src/ || echo "dist/server/server/src/ not found"
          echo "========================"
          
          # List all installed dependencies for debugging
          echo "\nInstalled dependencies:"
          npm list --depth=0 --omit=dev || echo "Failed to list dependencies"
      
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'excel-etl-backend-378680'
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: deployment/
          
      - name: Verify deployment
        run: |
          echo "✅ Deployment completed successfully!"
          echo ""
          echo "1. Go to Azure Portal -> Your App Service -> Configuration"
          echo "2. Under 'Application settings', add/update these settings:"
          echo "   - WEBSITE_RUN_FROM_PACKAGE = 0"
          echo "   - SCM_DO_BUILD_DURING_DEPLOYMENT = 1"
          echo "   - NODE_ENV = production"
          echo "   - PORT = 8080"
          echo "   - AUTH_ENABLED = true"
          echo "   - AZURE_COSMOS_ENDPOINT = [Your Cosmos DB Endpoint]"
          echo "   - AZURE_COSMOS_KEY = [Your Cosmos DB Key]"
          echo "   - AZURE_COSMOS_DATABASE = [Your Database Name]"
          echo "   - AZURE_COSMOS_CONTAINER = [Your Container Name]"
          echo "   - AZURE_STORAGE_CONNECTION_STRING = [Your Storage Connection String]"
          echo "   - AZURE_STORAGE_CONTAINER = excel-uploads"
          echo "   - ALLOWED_ORIGINS = https://gray-flower-09b086c00.6.azurestaticapps.net,http://localhost:3000,http://localhost:5173"
          echo "   - FILE_SIZE_LIMIT = 10485760"
          echo "   - LOG_LEVEL = info"
          echo ""
          echo "3. Under 'Configuration' -> 'General settings':"
          echo "   - Set 'Startup Command' to: node dist/server.js"
          echo "   - Set 'Node version' to: 20-lts"
          echo ""
          echo "4. Save the settings and restart your app"
          echo ""
          echo "🌐 Your app should now be available at: https://excel-etl-backend-378680.azurewebsites.net"