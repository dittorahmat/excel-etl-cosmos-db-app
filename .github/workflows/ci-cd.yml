name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  id-token: write
  deployments: write

env:
  NODE_VERSION: '20'
  AZURE_WEBAPP_NAME: ${{ vars.AZURE_WEBAPP_NAME || 'iesr-db' }}
  AZURE_STATIC_WEB_APP_NAME: ${{ vars.AZURE_STATIC_WEB_APP_NAME || '' }}
  AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP || 'IESR-DB' }}

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      working-directory: ./
      run: |
        npm ci --include=dev
        npx tsc --version
        npx eslint --version

    - name: Lint codebase
      working-directory: ./
      run: npm run lint

    - name: Run frontend tests
      working-directory: ./
      run: npm run test:client

    - name: Run backend tests
      working-directory: ./
      run: npm run test:server

    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json,./server/coverage/coverage-final.json
        fail_ci_if_error: false

  deploy-frontend:
    name: Deploy Frontend
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build:client
      env:
        VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}


    - name: Check for deployment token
      id: check_token
      run: |
        if [ -n "${{ secrets.AZURE_STATIC_WEB_APPS_TOKEN }}" ]; then
          echo "has_token=true" >> $GITHUB_OUTPUT
        else
          echo "has_token=false" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to Azure Static Web App
      if: steps.check_token.outputs.has_token == 'true'
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: 'upload'
        app_location: 'dist'
        output_location: 'dist'
        skip_deploy_on_missing_secrets: true
        verbose: true

    - name: Skip deployment (no token)
      if: steps.check_token.outputs.has_token != 'true'
      run: |
        echo "Skipping deployment: AZURE_STATIC_WEB_APPS_TOKEN secret not set"
        echo "To enable deployment, add the AZURE_STATIC_WEB_APPS_TOKEN secret to your repository settings"

  deploy-backend:
    name: Deploy Backend
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      working-directory: ./
      run: npm ci --production=false

    - name: Build backend
      working-directory: ./
      run: npm run build:server
      env:
        NODE_ENV: production

    - name: Prepare deployment package
      working-directory: ./
      run: |
        mkdir -p deployment
        # Copy the built server files from dist/server to deployment
        cp -r dist/server/* deployment/
        # Copy package.json from the server directory
        cp server/package.json deployment/
        # Copy web.config for Azure App Service
        echo '<?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <webSocket enabled="false" />
            <handlers>
              <add name="iisnode" path="dist/server.js" verb="*" modules="iisnode" />
            </handlers>
            <rewrite>
              <rules>
                <rule name="DynamicContent">
                  <match url="/*" />
                  <action type="Rewrite" url="dist/server.js" />
                </rule>
              </rules>
            </rewrite>
            <security>
              <requestFiltering removeServerHeader="true" />
            </security>
          </system.webServer>
        </configuration>' > deployment/web.config
        # Install production dependencies only (no devDependencies)
        cd deployment && npm install --omit=dev --prefer-offline --no-audit --progress=false

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
        package: ./deployment
        slot-name: production

    - name: Login with publish profile
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_PUBLISH_PROFILE }}

    - name: Configure App Service Settings
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          # Show current subscription info
          az account show
          
          # Configure CORS for the frontend
          az webapp cors add \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --allowed-origins 'https://*.azurestaticapps.net' \
            --verbose
          
          # Configure environment variables
          az webapp config appsettings set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --settings \
              PORT=8080 \
              NODE_ENV=production \
              WEBSITE_NODE_DEFAULT_VERSION=~20 \
              SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            --verbose

    - name: Check for monitoring secrets
      id: check_monitoring_secrets
      run: |
        if [ -n "${{ secrets.AZURE_WEBAPP_RESOURCE_ID }}" ] && [ -n "${{ secrets.AZURE_RESOURCE_GROUP }}" ]; then
          echo "has_secrets=true" >> $GITHUB_OUTPUT
        else
          echo "has_secrets=false" >> $GITHUB_OUTPUT
        fi

    - name: Setup deployment monitoring
      if: always() && steps.check_monitoring_secrets.outputs.has_secrets == 'true'
      uses: Azure/cli@v1.0.0
      with:
        azcliversion: 2.0.72
        inlineScript: |
          echo "Setting up deployment monitoring..."
          
          # Check if the alert already exists
          if ! az monitor metrics alert show \
            --name "DeploymentSuccessAlert" \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --output none 2>/dev/null; then
            
            echo "Creating deployment success alert..."
            az monitor metrics alert create \
              --name "DeploymentSuccessAlert" \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --scopes ${{ secrets.AZURE_WEBAPP_RESOURCE_ID }} \
              --condition "count deployment_http_2xx > 0" \
              --description "Track successful deployments" \
              --evaluation-frequency "PT5M" \
              --window-size "PT5M" \
              --severity 3 \
              --auto-mitigate true \
              --action ""
          else
            echo "Deployment success alert already exists, skipping creation."
          fi
          
    - name: Skip monitoring setup (missing secrets)
      if: always() && steps.check_monitoring_secrets.outputs.has_secrets != 'true'
      run: |
        echo "Skipping monitoring setup: Required secrets not configured"
        echo "To enable monitoring, ensure AZURE_WEBAPP_RESOURCE_ID and AZURE_RESOURCE_GROUP secrets are set"
