# Simple Dockerfile for Excel to Cosmos DB Dashboard
# This Dockerfile creates a production-ready container for deployment

# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache curl bash

# Copy package files for dependency installation
COPY package*.json ./
COPY server/package*.json ./server/

# Install frontend dependencies with network resilience
RUN npm ci --prefer-offline --no-audit --no-fund || npm install --prefer-offline --no-audit --no-fund

# Install server dependencies with network resilience
RUN cd server && npm ci --prefer-offline --no-audit --no-fund || npm install --prefer-offline --no-audit --no-fund

# Fix Tailwind CSS version conflict
RUN npm uninstall @tailwindcss/vite
RUN npm install tailwindcss@3.4.3 postcss@8.4.38 autoprefixer@10.4.20 --save-dev --prefer-offline --no-audit --no-fund

# Copy configuration files
COPY .env ./
COPY postcss.config.cjs ./
COPY tailwind.config.js ./
COPY tsconfig.base.json ./

# Copy .env file to server directory as well
COPY .env ./server/.env

# Copy shared code
COPY common ./common
COPY config ./config

# Copy source code
COPY src ./src
COPY server/src ./server/src
COPY index.html vite.config.ts tsconfig.json tsconfig.node.json ./
COPY tsconfig.client.json tsconfig.server.json tsconfig.common.json ./
COPY server/tsconfig*.json ./server/
COPY scripts ./scripts
COPY public ./public

# Build frontend and backend
RUN npm run build

# Production stage
FROM node:18-alpine

# Install system dependencies and create log directory
RUN apk add --no-cache curl bash \
    && mkdir -p /app/LogFiles

# Set working directory
WORKDIR /app

# Copy package files for production dependency installation
COPY package*.json ./
COPY server/package*.json ./server/

# Install production dependencies only with network resilience
RUN npm ci --only=production --prefer-offline --no-audit --no-fund || npm install --only=production --prefer-offline --no-audit --no-fund \
    && cd server && npm ci --only=production --prefer-offline --no-audit --no-fund || npm install --only=production --prefer-offline --no-audit --no-fund

# Copy built files from builder stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/server/dist ./server/dist

# Copy necessary runtime files
COPY start.sh /start.sh
RUN chmod +x /start.sh

# Copy common directory
COPY common ./common

# Copy .env file to the root and server directories
COPY --from=builder /app/.env ./.env
COPY --from=builder /app/.env ./server/.env

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Start command
ENTRYPOINT ["/start.sh"]