feat: Implement dynamic query filtering and fix related issues

This commit introduces dynamic query filtering capabilities to the application.

Key changes include:
- **Backend (`server/src/routes/v2/query/handlers/query-rows-exact.handler.ts`):**
  - Modified to accept and process a `filters` array in the request body.
  - Dynamically constructs Cosmos DB `WHERE` clauses based on filter conditions (field, operator, value).
  - Supports various operators (e.g., `=`, `!=`, `contains`, `startsWith`, `endsWith`, `>`, `>=`, `<`, `<=`, `between`, `empty`, `!empty`).
  - Ensures filter parameters are correctly added to the Cosmos DB query.

- **Frontend (`src/components/QueryBuilder/QueryBuilder.tsx`, `src/pages/DashboardPage.tsx`):**
  - `QueryBuilder` now passes the `filters` array to its `onExecute` prop.
  - `DashboardPage`'s `executeQuery` and `handleExecuteQuery` functions are updated to correctly receive and pass the `filters` to the backend API.
  - `FilterControls.tsx` updated to ensure the filter selection checkbox is interactive and correctly reflects the selection state.

- **Build and Linting Fixes:**
  - Resolved `JsonWebTokenError` and `TokenExpiredError` `instanceof` issues in `server/src/middleware/auth.ts` by explicitly casting `error` to `any`.
  - Corrected `useCallback` dependency warnings in `src/pages/DashboardPage.tsx`.

All linting, type checking, and tests are passing, and the build is successful.