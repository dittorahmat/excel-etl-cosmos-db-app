<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="server/test/apiKeyAuth.integration.test.ts">
    <testCase name="API Key Authentication Integration - should return 401 if no API key is provided" duration="223" />
    <testCase name="API Key Authentication Integration - should return 401 for invalid API key format" duration="32" />
    <testCase name="API Key Authentication Integration - should return 200 for valid API key in header" duration="49" />
    <testCase name="API Key Authentication Integration - should return 401 for revoked API key" duration="33" />
    <testCase name="API Key Authentication Integration - should return 401 for invalid IP address" duration="45" />
    <testCase name="API Key Authentication Integration - should return 401 for non-existent API key" duration="40" />
  </file>
  <file path="server/test/apiKeyAuth.integration.test.ts">
    <testCase name="server/test/apiKeyAuth.integration.test.ts - API Key Authentication Integration - should return 401 if no API key is provided" duration="0" />
    <testCase name="server/test/apiKeyAuth.integration.test.ts - API Key Authentication Integration - should return 401 for invalid API key format" duration="0" />
    <testCase name="server/test/apiKeyAuth.integration.test.ts - API Key Authentication Integration - should return 200 for valid API key in header" duration="0" />
    <testCase name="server/test/apiKeyAuth.integration.test.ts - API Key Authentication Integration - should return 401 for revoked API key" duration="0" />
    <testCase name="server/test/apiKeyAuth.integration.test.ts - API Key Authentication Integration - should return 401 for invalid IP address" duration="0" />
    <testCase name="server/test/apiKeyAuth.integration.test.ts - API Key Authentication Integration - should return 401 for non-existent API key" duration="0" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.auth.test.ts">
    <testCase name="API Key Authentication Middleware - Authentication Flow - should skip API key validation if user is already authenticated" duration="109" />
    <testCase name="API Key Authentication Middleware - Authentication Flow - should attach API key info to request when validation succeeds" duration="49" />
    <testCase name="API Key Authentication Middleware - Authentication Flow - should call next with error when API key validation fails" duration="64" />
    <testCase name="API Key Authentication Middleware - Authentication Flow - should handle IP address restrictions" duration="37" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.auth.test.ts">
    <testCase name="server/test/apiKeyAuth.middleware.auth.test.ts - API Key Authentication Middleware - Authentication Flow - should skip API key validation if user is already authenticated" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.auth.test.ts - API Key Authentication Middleware - Authentication Flow - should attach API key info to request when validation succeeds" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.auth.test.ts - API Key Authentication Middleware - Authentication Flow - should call next with error when API key validation fails" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.auth.test.ts - API Key Authentication Middleware - Authentication Flow - should handle IP address restrictions" duration="0" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.basic.test.ts">
    <testCase name="API Key Authentication Middleware - Basic Validation - should call next with error if no API key is provided" duration="39" />
    <testCase name="API Key Authentication Middleware - Basic Validation - should validate API key from Authorization header" duration="173" />
    <testCase name="API Key Authentication Middleware - Basic Validation - should validate API key from query parameter" duration="18" />
    <testCase name="API Key Authentication Middleware - Basic Validation - should prioritize Authorization header over query parameter" duration="19" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.basic.test.ts">
    <testCase name="server/test/apiKeyAuth.middleware.basic.test.ts - API Key Authentication Middleware - Basic Validation - should call next with error if no API key is provided" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.basic.test.ts - API Key Authentication Middleware - Basic Validation - should validate API key from Authorization header" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.basic.test.ts - API Key Authentication Middleware - Basic Validation - should validate API key from query parameter" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.basic.test.ts - API Key Authentication Middleware - Basic Validation - should prioritize Authorization header over query parameter" duration="0" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.concurrent.test.ts">
    <testCase name="API Key Authentication Middleware - Concurrent Validation - should handle concurrent API key validations" duration="27" />
    <testCase name="API Key Authentication Middleware - Concurrent Validation - should handle concurrent validation with rate limiting" duration="27" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.concurrent.test.ts">
    <testCase name="server/test/apiKeyAuth.middleware.concurrent.test.ts - API Key Authentication Middleware - Concurrent Validation - should handle concurrent API key validations" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.concurrent.test.ts - API Key Authentication Middleware - Concurrent Validation - should handle concurrent validation with rate limiting" duration="0" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.error.test.ts">
    <testCase name="API Key Authentication Middleware - Error Handling - should handle repository validation errors" duration="81" />
    <testCase name="API Key Authentication Middleware - Error Handling - should handle invalid API key format in header" duration="13" />
    <testCase name="API Key Authentication Middleware - Error Handling - should handle empty API key in header" duration="28" />
    <testCase name="API Key Authentication Middleware - Error Handling - should handle invalid API key in query parameter" duration="9" />
    <testCase name="API Key Authentication Middleware - Error Handling - should handle expired API key" duration="25" />
    <testCase name="API Key Authentication Middleware - Error Handling - should handle inactive API key" duration="24" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.error.test.ts">
    <testCase name="server/test/apiKeyAuth.middleware.error.test.ts - API Key Authentication Middleware - Error Handling - should handle repository validation errors" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.error.test.ts - API Key Authentication Middleware - Error Handling - should handle invalid API key format in header" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.error.test.ts - API Key Authentication Middleware - Error Handling - should handle empty API key in header" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.error.test.ts - API Key Authentication Middleware - Error Handling - should handle invalid API key in query parameter" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.error.test.ts - API Key Authentication Middleware - Error Handling - should handle expired API key" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.error.test.ts - API Key Authentication Middleware - Error Handling - should handle inactive API key" duration="0" />
  </file>
  <file path="server/test/apiKeyAuth.validation.test.ts">
    <testCase name="API key validation with IP restrictions - should reject empty API key" duration="28" />
    <testCase name="API key validation with IP restrictions - should reject invalid API key format" duration="9" />
    <testCase name="API key validation with IP restrictions - should reject non-existent API key" duration="6" />
    <testCase name="API key validation with IP restrictions - should reject revoked API key" duration="9" />
    <testCase name="API key validation with IP restrictions - should validate active API key" duration="10" />
    <testCase name="API key validation with IP restrictions - should reject request from unauthorized IP" duration="3" />
    <testCase name="API key validation with IP restrictions - should allow request from authorized IP" duration="3" />
  </file>
  <file path="server/test/apiKeyAuth.validation.test.ts">
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - should reject empty API key" duration="0" />
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - should reject invalid API key format" duration="0" />
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - should reject non-existent API key" duration="0" />
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - should reject revoked API key" duration="0" />
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - should validate active API key" duration="0" />
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - should reject request from unauthorized IP" duration="0" />
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - should allow request from authorized IP" duration="0" />
  </file>
  <file path="server/test/apiKeyRepository.test.ts">
    <testCase name="ApiKeyRepository - createApiKey - should create a new API key" duration="15" />
    <testCase name="ApiKeyRepository - update - should update an existing API key" duration="10" />
    <testCase name="ApiKeyRepository - revokeApiKey - should revoke an existing API key" duration="4" />
    <testCase name="ApiKeyRepository - validateApiKey - should validate a correct API key" duration="54" />
    <testCase name="ApiKeyRepository - validateApiKey - should respect IP restrictions" duration="8" />
  </file>
  <file path="server/test/apiKeyRepository.test.ts">
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - createApiKey - should create a new API key" duration="0" />
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - update - should update an existing API key" duration="0" />
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - revokeApiKey - should revoke an existing API key" duration="0" />
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - validateApiKey - should validate a correct API key" duration="0" />
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - validateApiKey - should respect IP restrictions" duration="0" />
  </file>
  <file path="server/test/apiKeyRevocation.test.ts">
    <testCase name="API Key Revocation - revokeApiKey - should successfully revoke an active API key" duration="36" />
    <testCase name="API Key Revocation - revokeApiKey - should return false when key is not found" duration="5" />
    <testCase name="API Key Revocation - revokeApiKey - should return false when user does not own the key" duration="2" />
    <testCase name="API Key Revocation - revokeApiKey - should handle errors during key revocation" duration="4" />
    <testCase name="API Key Revocation - revokeApiKey - should handle already revoked keys" duration="3" />
  </file>
  <file path="server/test/apiKeyRevocation.test.ts">
    <testCase name="server/test/apiKeyRevocation.test.ts - API Key Revocation - revokeApiKey - should successfully revoke an active API key" duration="0" />
    <testCase name="server/test/apiKeyRevocation.test.ts - API Key Revocation - revokeApiKey - should return false when key is not found" duration="0" />
    <testCase name="server/test/apiKeyRevocation.test.ts - API Key Revocation - revokeApiKey - should return false when user does not own the key" duration="0" />
    <testCase name="server/test/apiKeyRevocation.test.ts - API Key Revocation - revokeApiKey - should handle errors during key revocation" duration="0" />
    <testCase name="server/test/apiKeyRevocation.test.ts - API Key Revocation - revokeApiKey - should handle already revoked keys" duration="0" />
  </file>
  <file path="server/test/apiKeyRoutes.test.ts">
    <testCase name="API Key Routes - should have tests" duration="4" />
  </file>
  <file path="server/test/apiKeyRoutes.test.ts">
    <testCase name="server/test/apiKeyRoutes.test.ts - API Key Routes - should have tests" duration="0" />
  </file>
  <file path="server/test/authMiddleware.test.ts">
    <testCase name="Token Validation Middleware - validateToken - should call next() when AUTH_ENABLED is false" duration="17" />
    <testCase name="Token Validation Middleware - validateToken - should return 401 when no token is provided" duration="13" />
    <testCase name="Token Validation Middleware - validateToken - should return 401 when token is invalid" duration="96" />
    <testCase name="Token Validation Middleware - validateToken - should return 401 when token is expired" duration="8" />
    <testCase name="Token Validation Middleware - validateToken - should set req.user and call next() when token is valid" duration="3" />
  </file>
  <file path="server/test/authMiddleware.test.ts">
    <testCase name="server/test/authMiddleware.test.ts - Token Validation Middleware - validateToken - should call next() when AUTH_ENABLED is false" duration="0" />
    <testCase name="server/test/authMiddleware.test.ts - Token Validation Middleware - validateToken - should return 401 when no token is provided" duration="0" />
    <testCase name="server/test/authMiddleware.test.ts - Token Validation Middleware - validateToken - should return 401 when token is invalid" duration="0" />
    <testCase name="server/test/authMiddleware.test.ts - Token Validation Middleware - validateToken - should return 401 when token is expired" duration="0" />
    <testCase name="server/test/authMiddleware.test.ts - Token Validation Middleware - validateToken - should set req.user and call next() when token is valid" duration="0" />
  </file>
  <file path="server/test/data.test.ts">
    <testCase name="Data API - should return data with status 200 when authenticated" duration="155" />
    <testCase name="Data API - should filter data by date range" duration="16" />
    <testCase name="Data API - should filter data by category" duration="10" />
    <testCase name="Data API - should limit results when limit parameter is provided" duration="10" />
  </file>
  <file path="server/test/data.test.ts">
    <testCase name="server/test/data.test.ts - Data API - should return data with status 200 when authenticated" duration="0" />
    <testCase name="server/test/data.test.ts - Data API - should filter data by date range" duration="0" />
    <testCase name="server/test/data.test.ts - Data API - should filter data by category" duration="0" />
    <testCase name="server/test/data.test.ts - Data API - should limit results when limit parameter is provided" duration="0" />
  </file>
  <file path="server/test/excelParser.test.ts">
    <testCase name="Excel Parser - processExcelFile - should successfully process a valid Excel file" duration="50" />
    <testCase name="Excel Parser - processExcelFile - should handle empty Excel files" duration="7" />
    <testCase name="Excel Parser - processExcelFile - should handle parsing errors" duration="230" />
    <testCase name="Excel Parser - processExcelFile - should handle record processing errors gracefully" duration="6" />
  </file>
  <file path="server/test/excelParser.test.ts">
    <testCase name="server/test/excelParser.test.ts - Excel Parser - processExcelFile - should successfully process a valid Excel file" duration="0" />
    <testCase name="server/test/excelParser.test.ts - Excel Parser - processExcelFile - should handle empty Excel files" duration="0" />
    <testCase name="server/test/excelParser.test.ts - Excel Parser - processExcelFile - should handle parsing errors" duration="0" />
    <testCase name="server/test/excelParser.test.ts - Excel Parser - processExcelFile - should handle record processing errors gracefully" duration="0" />
  </file>
  <file path="server/test/rateLimit.test.ts">
    <testCase name="Rate Limiting Middleware - should allow requests under the limit" duration="142" />
    <testCase name="Rate Limiting Middleware - should block requests over the limit" duration="57" />
    <testCase name="Rate Limiting Middleware - should reset the counter after the window expires" duration="63" />
    <testCase name="Rate Limiting Middleware - should use API key as the rate limit key when available" duration="56" />
    <testCase name="Rate Limiting Middleware - should skip rate limiting when skip function returns true" duration="60" />
  </file>
  <file path="server/test/rateLimit.test.ts">
    <testCase name="server/test/rateLimit.test.ts - Rate Limiting Middleware - should allow requests under the limit" duration="0" />
    <testCase name="server/test/rateLimit.test.ts - Rate Limiting Middleware - should block requests over the limit" duration="0" />
    <testCase name="server/test/rateLimit.test.ts - Rate Limiting Middleware - should reset the counter after the window expires" duration="0" />
    <testCase name="server/test/rateLimit.test.ts - Rate Limiting Middleware - should use API key as the rate limit key when available" duration="0" />
    <testCase name="server/test/rateLimit.test.ts - Rate Limiting Middleware - should skip rate limiting when skip function returns true" duration="0" />
  </file>
  <file path="server/test/sanity.test.ts">
    <testCase name="Sanity Test - should pass a basic test" duration="9" />
    <testCase name="Sanity Test - should have access to global test utilities" duration="2" />
    <testCase name="Sanity Test - should have access to Node.js globals" duration="4" />
    <testCase name="Sanity Test - should have access to test environment variables" duration="1" />
  </file>
  <file path="server/test/sanity.test.ts">
    <testCase name="server/test/sanity.test.ts - Sanity Test - should pass a basic test" duration="0" />
    <testCase name="server/test/sanity.test.ts - Sanity Test - should have access to global test utilities" duration="0" />
    <testCase name="server/test/sanity.test.ts - Sanity Test - should have access to Node.js globals" duration="0" />
    <testCase name="server/test/sanity.test.ts - Sanity Test - should have access to test environment variables" duration="0" />
  </file>
  <file path="server/test/server.test.ts">
    <testCase name="Server - Health Check - should return 200 and status ok for /health endpoint" duration="248" />
    <testCase name="Server - Health Check - should include environment information in the response" duration="12" />
    <testCase name="Server - 404 Handler - should return 404 for non-existent routes" duration="15" />
    <testCase name="Server - 404 Handler - should handle various HTTP methods for non-existent routes" duration="48" />
    <testCase name="Server - Error Handling - should return 500 for unhandled errors" duration="8" />
  </file>
  <file path="server/test/server.test.ts">
    <testCase name="server/test/server.test.ts - Server - Health Check - should return 200 and status ok for /health endpoint" duration="0" />
    <testCase name="server/test/server.test.ts - Server - Health Check - should include environment information in the response" duration="0" />
    <testCase name="server/test/server.test.ts - Server - 404 Handler - should return 404 for non-existent routes" duration="0" />
    <testCase name="server/test/server.test.ts - Server - 404 Handler - should handle various HTTP methods for non-existent routes" duration="0" />
    <testCase name="server/test/server.test.ts - Server - Error Handling - should return 500 for unhandled errors" duration="0" />
  </file>
  <file path="server/test/type-tests/global-types.test.ts">
    <testCase name="Global Type Definitions - should have Node.js globals available" duration="6" />
    <testCase name="Global Type Definitions - should have test globals available" duration="1" />
    <testCase name="Global Type Definitions - should have proper DOM types in frontend files" duration="1" />
  </file>
  <file path="server/test/type-tests/global-types.test.ts">
    <testCase name="server/test/type-tests/global-types.test.ts - Global Type Definitions - should have Node.js globals available" duration="0" />
    <testCase name="server/test/type-tests/global-types.test.ts - Global Type Definitions - should have test globals available" duration="0" />
    <testCase name="server/test/type-tests/global-types.test.ts - Global Type Definitions - should have proper DOM types in frontend files" duration="0" />
  </file>
  <file path="server/test/upload-route.test.ts">
    <testCase name="Upload Handler - File Upload Tests - should return 400 if no file is uploaded" duration="36" />
    <testCase name="Upload Handler - File Upload Tests - should return 400 if user is not authenticated" duration="6" />
    <testCase name="Upload Handler - File Upload Tests - should process a valid file upload" duration="20" />
    <testCase name="Upload Handler - File Upload Tests - should return 400 if file processing fails" duration="3" />
  </file>
  <file path="server/test/upload-route.test.ts">
    <testCase name="server/test/upload-route.test.ts - Upload Handler - File Upload Tests - should return 400 if no file is uploaded" duration="0" />
    <testCase name="server/test/upload-route.test.ts - Upload Handler - File Upload Tests - should return 400 if user is not authenticated" duration="0" />
    <testCase name="server/test/upload-route.test.ts - Upload Handler - File Upload Tests - should process a valid file upload" duration="0" />
    <testCase name="server/test/upload-route.test.ts - Upload Handler - File Upload Tests - should return 400 if file processing fails" duration="0" />
  </file>
  <file path="server/test/upload.test.ts">
    <testCase name="Upload Handler - should return 400 if no file is uploaded" duration="30" />
    <testCase name="Upload Handler - should return 200 and process the file when a valid file is uploaded" duration="4" />
  </file>
  <file path="server/test/upload.test.ts">
    <testCase name="server/test/upload.test.ts - Upload Handler - should return 400 if no file is uploaded" duration="0" />
    <testCase name="server/test/upload.test.ts - Upload Handler - should return 200 and process the file when a valid file is uploaded" duration="0" />
  </file>
</testExecutions>