<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="server/test/apiKeyAuth.integration.test.ts">
    <testCase name="API Key Authentication Integration - should return 401 if no API key is provided" duration="118" />
    <testCase name="API Key Authentication Integration - should return 401 for invalid API key format" duration="17" />
    <testCase name="API Key Authentication Integration - should return 200 for valid API key in header" duration="31" />
    <testCase name="API Key Authentication Integration - should return 401 for revoked API key" duration="13" />
    <testCase name="API Key Authentication Integration - should return 401 for invalid IP address" duration="24" />
    <testCase name="API Key Authentication Integration - should return 401 for non-existent API key" duration="19" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.auth.test.ts">
    <testCase name="API Key Authentication Middleware - Authentication Flow - should skip API key validation if user is already authenticated" duration="17" />
    <testCase name="API Key Authentication Middleware - Authentication Flow - should attach API key info to request when validation succeeds" duration="27" />
    <testCase name="API Key Authentication Middleware - Authentication Flow - should call next with error when API key validation fails" duration="111" />
    <testCase name="API Key Authentication Middleware - Authentication Flow - should handle IP address restrictions" duration="119" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.basic.test.ts">
    <testCase name="API Key Authentication Middleware - Basic Validation - should call next with error if no API key is provided" duration="31" />
    <testCase name="API Key Authentication Middleware - Basic Validation - should validate API key from Authorization header" duration="13" />
    <testCase name="API Key Authentication Middleware - Basic Validation - should validate API key from query parameter" duration="8" />
    <testCase name="API Key Authentication Middleware - Basic Validation - should prioritize Authorization header over query parameter" duration="7" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.concurrent.test.ts">
    <testCase name="API Key Authentication Middleware - Concurrent Validation - should handle concurrent API key validations" duration="21" />
    <testCase name="API Key Authentication Middleware - Concurrent Validation - should handle concurrent validation with rate limiting" duration="14" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.error.test.ts">
    <testCase name="API Key Authentication Middleware - Error Handling - should handle repository validation errors" duration="45" />
    <testCase name="API Key Authentication Middleware - Error Handling - should handle invalid API key format in header" duration="15" />
    <testCase name="API Key Authentication Middleware - Error Handling - should handle empty API key in header" duration="7" />
    <testCase name="API Key Authentication Middleware - Error Handling - should handle invalid API key in query parameter" duration="22" />
    <testCase name="API Key Authentication Middleware - Error Handling - should handle expired API key" duration="12" />
    <testCase name="API Key Authentication Middleware - Error Handling - should handle inactive API key" duration="7" />
  </file>
  <file path="server/test/apiKeyAuth.validation.test.ts">
    <testCase name="API key validation with IP restrictions - should reject empty API key" duration="17" />
    <testCase name="API key validation with IP restrictions - should reject invalid API key format" duration="4" />
    <testCase name="API key validation with IP restrictions - should reject non-existent API key" duration="3" />
    <testCase name="API key validation with IP restrictions - should reject revoked API key" duration="6" />
    <testCase name="API key validation with IP restrictions - should validate active API key" duration="12" />
    <testCase name="API key validation with IP restrictions - should reject request from unauthorized IP" duration="3" />
    <testCase name="API key validation with IP restrictions - should allow request from authorized IP" duration="6" />
  </file>
  <file path="server/test/apiKeyRepository.test.ts">
    <testCase name="ApiKeyRepository - createApiKey - should create a new API key" duration="31" />
    <testCase name="ApiKeyRepository - update - should update an existing API key" duration="10" />
    <testCase name="ApiKeyRepository - revokeApiKey - should revoke an existing API key" duration="15" />
    <testCase name="ApiKeyRepository - validateApiKey - should validate a correct API key" duration="11" />
    <testCase name="ApiKeyRepository - validateApiKey - should respect IP restrictions" duration="5" />
  </file>
  <file path="server/test/apiKeyRevocation.test.ts">
    <testCase name="API Key Revocation - revokeApiKey - should successfully revoke an active API key" duration="32" />
    <testCase name="API Key Revocation - revokeApiKey - should return false when key is not found" duration="4" />
    <testCase name="API Key Revocation - revokeApiKey - should return false when user does not own the key" duration="3" />
    <testCase name="API Key Revocation - revokeApiKey - should handle errors during key revocation" duration="6" />
    <testCase name="API Key Revocation - revokeApiKey - should handle already revoked keys" duration="5" />
  </file>
  <file path="server/test/apiKeyRoutes.test.ts">
    <testCase name="API Key Routes - should have tests" duration="16" />
  </file>
  <file path="server/test/config/azure-services.test.ts">
    <testCase name="initializeAzureServices - should initialize real services in non-test environment" duration="28" />
    <testCase name="initializeAzureServices - should initialize mock services in test environment" duration="10" />
    <testCase name="initializeAzureServices - should handle errors during blob storage initialization" duration="66" />
    <testCase name="initializeAzureServices - should handle errors during cosmos DB initialization" duration="6" />
    <testCase name="initializeAzureServices - should handle errors during mock blob storage initialization" duration="5" />
    <testCase name="initializeAzureServices - should handle errors during mock cosmos DB initialization" duration="6" />
  </file>
  <file path="server/test/data.test.ts">
    <testCase name="Data API - should return data with status 200 when authenticated" duration="87" />
    <testCase name="Data API - should filter data by date range" duration="31" />
    <testCase name="Data API - should filter data by category" duration="14" />
    <testCase name="Data API - should limit results when limit parameter is provided" duration="9" />
  </file>
  <file path="server/test/errorHandler.test.ts">
    <testCase name="Error Handler Middleware - should handle generic errors with a 500 status code" duration="58" />
    <testCase name="Error Handler Middleware - should handle validation errors with a 400 status code" duration="5" />
    <testCase name="Error Handler Middleware - should handle unauthorized errors with a 401 status code" duration="3" />
    <testCase name="Error Handler Middleware - should handle forbidden errors with a 403 status code" duration="3" />
    <testCase name="Error Handler Middleware - should handle not found errors with a 404 status code" duration="3" />
    <testCase name="Error Handler Middleware - should handle file size limit errors with a 413 status code" duration="5" />
    <testCase name="Error Handler Middleware - should handle invalid file type errors with a 400 status code" duration="2" />
    <testCase name="Error Handler Middleware - should include stack trace in development environment" duration="8" />
  </file>
  <file path="server/test/excelParser.test.ts">
    <testCase name="processExcelFile - should successfully process a valid Excel file" duration="36" />
    <testCase name="processExcelFile - should return an error for an invalid Excel file format" duration="20" />
    <testCase name="processExcelFile - should return an error if no worksheets are found" duration="3" />
    <testCase name="processExcelFile - should return an error if no data rows are found (only headers)" duration="4" />
    <testCase name="processExcelFile - should handle null and undefined cell values correctly" duration="4" />
    <testCase name="processExcelFile - should return a general error if an unexpected error occurs during processing" duration="2" />
  </file>
  <file path="server/test/middleware/auth.test.ts">
    <testCase name="Auth Middleware - authenticateToken - should bypass authentication if NODE_ENV is test" duration="7" />
    <testCase name="Auth Middleware - authenticateToken - should return 401 if no token is provided and not in test environment" duration="3" />
    <testCase name="Auth Middleware - authenticateToken - should return 403 if token is invalid and not in test environment" duration="15" />
    <testCase name="Auth Middleware - authenticateToken - should attach decoded token to request and call next if token is valid" duration="2" />
    <testCase name="Auth Middleware - checkRole - should bypass role check if NODE_ENV is test" duration="2" />
    <testCase name="Auth Middleware - checkRole - should return 403 if user has no roles" duration="2" />
    <testCase name="Auth Middleware - checkRole - should return 403 if user does not have required role" duration="2" />
    <testCase name="Auth Middleware - checkRole - should call next if user has required role" duration="1" />
    <testCase name="Auth Middleware - checkRole - should call next if no roles are required" duration="2" />
  </file>
  <file path="server/test/rateLimit.test.ts">
    <testCase name="Rate Limiting Middleware - should allow requests under the limit" duration="173" />
    <testCase name="Rate Limiting Middleware - should block requests over the limit" duration="65" />
    <testCase name="Rate Limiting Middleware - should reset the counter after the window expires" duration="44" />
    <testCase name="Rate Limiting Middleware - should use API key as the rate limit key when available" duration="41" />
    <testCase name="Rate Limiting Middleware - should skip rate limiting when skip function returns true" duration="88" />
  </file>
  <file path="server/test/sanity.test.ts">
    <testCase name="Sanity Test - should pass a basic test" duration="5" />
    <testCase name="Sanity Test - should have access to global test utilities" duration="2" />
    <testCase name="Sanity Test - should have access to Node.js globals" duration="1" />
    <testCase name="Sanity Test - should have access to test environment variables" duration="4" />
  </file>
  <file path="server/test/server.core.test.ts">
    <testCase name="createApp - should create an Express app instance" duration="14" />
  </file>
  <file path="server/test/services/blob-storage/blob-storage.service.test.ts">
    <testCase name="Blob Storage Service - initializeBlobStorage - should initialize Blob Storage client successfully with test config" duration="18" />
    <testCase name="Blob Storage Service - initializeBlobStorage - should return early if Blob Storage client is already initialized" duration="6" />
    <testCase name="Blob Storage Service - initializeBlobStorage - should throw an error if connection string is not configured" duration="9" />
    <testCase name="Blob Storage Service - initializeBlobStorage - should throw an error if container name is not configured" duration="3" />
    <testCase name="Blob Storage Service - initializeBlobStorageAsync - should initialize and return a blob storage client" duration="17" />
    <testCase name="Blob Storage Service - initializeBlobStorageAsync - should upload a file successfully" duration="9" />
    <testCase name="Blob Storage Service - initializeBlobStorageAsync - should delete a file successfully" duration="5" />
    <testCase name="Blob Storage Service - initializeBlobStorageAsync - should get file URL" duration="5" />
    <testCase name="Blob Storage Service - initializeBlobStorageAsync - should get container name" duration="5" />
    <testCase name="Blob Storage Service - blobStorageService - should be a singleton instance" duration="3" />
    <testCase name="Blob Storage Service - blobStorageService - should initialize with config" duration="3" />
  </file>
  <file path="server/test/services/ingestion/ingestion.service.test.ts">
    <testCase name="IngestionService - should be defined" duration="13" />
    <testCase name="IngestionService - should successfully import a file and save metadata" duration="44" />
    <testCase name="IngestionService - should handle errors during file upload and set status to failed" duration="22" />
  </file>
  <file path="server/test/type-tests/global-types.test.ts">
    <testCase name="Global Type Definitions - should have Node.js globals available" duration="6" />
    <testCase name="Global Type Definitions - should have test globals available" duration="1" />
    <testCase name="Global Type Definitions - should have proper DOM types in frontend files" duration="1" />
  </file>
  <file path="server/test/upload.test.ts">
    <testCase name="Upload Route V2 - File Type Validation - should accept a valid .xlsx file" duration="469" />
    <testCase name="Upload Route V2 - File Type Validation - should return 500 if file processing fails" duration="109" />
    <testCase name="Upload Route V2 - File Type Validation - should handle generic application/octet-stream with correct extension" duration="26" />
    <testCase name="Upload Route V2 - File Type Validation - should return 400 for unsupported file type" duration="28" />
    <testCase name="Upload Route V2 - File Type Validation - should handle general errors in middleware" duration="24" />
    <testCase name="Upload Route V2 - GET /health - should return 200 and status ok" duration="15" />
    <testCase name="Upload Route V2 - Authentication - should apply authentication middleware when AUTH_ENABLED is true" duration="16" />
  </file>
</testExecutions>