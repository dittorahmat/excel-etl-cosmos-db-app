<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="server/test/apiKeyAuth.integration.test.ts">
    <testCase name="API Key Authentication Integration - should return 401 if no API key is provided" duration="196" />
    <testCase name="API Key Authentication Integration - should return 401 for invalid API key format" duration="69">
      <failure message="expected { Object (error) } to match object { Object (error) }">
        <![CDATA[AssertionError: expected { Object (error) } to match object { Object (error) }
    at Proxy.&lt;anonymous&gt; (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/expect/dist/index.js:1155:10)
    at Proxy.&lt;anonymous&gt; (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/expect/dist/index.js:1029:14)
    at Proxy.methodWrapper (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/chai/chai.js:1618:25)
    at /home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/server/test/apiKeyAuth.integration.test.ts:183:27
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20]]>
      </failure>
    </testCase>
    <testCase name="API Key Authentication Integration - should return 200 for valid API key in header" duration="202">
      <error message="expected 200 &quot;OK&quot;, got 401 &quot;Unauthorized&quot;">
        <![CDATA[Error: expected 200 &quot;OK&quot;, got 401 &quot;Unauthorized&quot;
    at /home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/server/test/apiKeyAuth.integration.test.ts:199:8
    at file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11
    at file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26
    at file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
----
    at Test._assertStatus (/home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/supertest/lib/test.js:252:14)
    at /home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/supertest/lib/test.js:308:13
    at Test._assertFunction (/home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/supertest/lib/test.js:285:13)
    at Test.assert (/home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/supertest/lib/test.js:164:23)
    at Server.localAssert (/home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/supertest/lib/test.js:120:14)
    at Object.onceWrapper (node:events:632:28)
    at Server.emit (node:events:518:28)
    at emitCloseNT (node:net:2375:8)
    at processTicksAndRejections (node:internal/process/task_queues:89:21)]]>
      </error>
    </testCase>
    <testCase name="API Key Authentication Integration - should return 401 for revoked API key" duration="147">
      <failure message="expected { Object (error) } to match object { Object (error) }">
        <![CDATA[AssertionError: expected { Object (error) } to match object { Object (error) }
    at Proxy.&lt;anonymous&gt; (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/expect/dist/index.js:1155:10)
    at Proxy.&lt;anonymous&gt; (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/expect/dist/index.js:1029:14)
    at Proxy.methodWrapper (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/chai/chai.js:1618:25)
    at /home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/server/test/apiKeyAuth.integration.test.ts:235:27
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20]]>
      </failure>
    </testCase>
    <testCase name="API Key Authentication Integration - should return 401 for invalid IP address" duration="65">
      <failure message="expected { Object (error) } to match object { Object (error) }">
        <![CDATA[AssertionError: expected { Object (error) } to match object { Object (error) }
    at Proxy.&lt;anonymous&gt; (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/expect/dist/index.js:1155:10)
    at Proxy.&lt;anonymous&gt; (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/expect/dist/index.js:1029:14)
    at Proxy.methodWrapper (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/chai/chai.js:1618:25)
    at /home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/server/test/apiKeyAuth.integration.test.ts:262:27
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20]]>
      </failure>
    </testCase>
    <testCase name="API Key Authentication Integration - should return 401 for non-existent API key" duration="162">
      <failure message="expected { Object (error) } to match object { Object (error) }">
        <![CDATA[AssertionError: expected { Object (error) } to match object { Object (error) }
    at Proxy.&lt;anonymous&gt; (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/expect/dist/index.js:1155:10)
    at Proxy.&lt;anonymous&gt; (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/expect/dist/index.js:1029:14)
    at Proxy.methodWrapper (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/chai/chai.js:1618:25)
    at /home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/server/test/apiKeyAuth.integration.test.ts:288:27
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20]]>
      </failure>
    </testCase>
  </file>
  <file path="server/test/apiKeyAuth.integration.test.ts">
    <testCase name="server/test/apiKeyAuth.integration.test.ts - API Key Authentication Integration - should return 401 if no API key is provided" duration="0" />
    <testCase name="server/test/apiKeyAuth.integration.test.ts - API Key Authentication Integration - should return 401 for invalid API key format" duration="0" />
    <testCase name="server/test/apiKeyAuth.integration.test.ts - API Key Authentication Integration - should return 200 for valid API key in header" duration="0" />
    <testCase name="server/test/apiKeyAuth.integration.test.ts - API Key Authentication Integration - should return 401 for revoked API key" duration="0" />
    <testCase name="server/test/apiKeyAuth.integration.test.ts - API Key Authentication Integration - should return 401 for invalid IP address" duration="0" />
    <testCase name="server/test/apiKeyAuth.integration.test.ts - API Key Authentication Integration - should return 401 for non-existent API key" duration="0" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.auth.test.ts">

  </file>
  <file path="server/test/apiKeyAuth.middleware.auth.test.ts">
    <testCase name="server/test/apiKeyAuth.middleware.auth.test.ts - API Key Authentication Middleware - Authentication Flow - should skip API key validation if user is already authenticated" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.auth.test.ts - API Key Authentication Middleware - Authentication Flow - should attach API key info to request when validation succeeds" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.auth.test.ts - API Key Authentication Middleware - Authentication Flow - should call next with error when API key validation fails" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.auth.test.ts - API Key Authentication Middleware - Authentication Flow - should handle IP address restrictions" duration="0" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.basic.test.ts">

  </file>
  <file path="server/test/apiKeyAuth.middleware.basic.test.ts">
    <testCase name="server/test/apiKeyAuth.middleware.basic.test.ts - API Key Authentication Middleware - Basic Validation - should call next with error if no API key is provided" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.basic.test.ts - API Key Authentication Middleware - Basic Validation - should validate API key from Authorization header" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.basic.test.ts - API Key Authentication Middleware - Basic Validation - should validate API key from query parameter" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.basic.test.ts - API Key Authentication Middleware - Basic Validation - should prioritize Authorization header over query parameter" duration="0" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.concurrent.test.ts">
    <testCase name="API Key Authentication Middleware - Concurrent Validation - should handle concurrent API key validations" duration="110">
      <failure message="expected { id: &apos;test-key-id&apos;, …(14) } to match object { id: &apos;key-1&apos;, userId: &apos;user-1&apos;, …(4) }
(10 matching properties omitted from actual)">
        <![CDATA[AssertionError: expected { id: &apos;test-key-id&apos;, …(14) } to match object { id: &apos;key-1&apos;, userId: &apos;user-1&apos;, …(4) }
(10 matching properties omitted from actual)
    at Proxy.&lt;anonymous&gt; (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/expect/dist/index.js:1155:10)
    at Proxy.&lt;anonymous&gt; (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/expect/dist/index.js:1029:14)
    at Proxy.methodWrapper (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/chai/chai.js:1618:25)
    at /home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/server/test/apiKeyAuth.middleware.concurrent.test.ts:213:28
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20]]>
      </failure>
    </testCase>
    <testCase name="API Key Authentication Middleware - Concurrent Validation - should handle concurrent validation with rate limiting" duration="43">
      <failure message="expected { id: &apos;test-key-id&apos;, …(14) } to match object { id: &apos;rate-limited-key&apos;, …(5) }
(10 matching properties omitted from actual)">
        <![CDATA[AssertionError: expected { id: &apos;test-key-id&apos;, …(14) } to match object { id: &apos;rate-limited-key&apos;, …(5) }
(10 matching properties omitted from actual)
    at Proxy.&lt;anonymous&gt; (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/expect/dist/index.js:1155:10)
    at Proxy.&lt;anonymous&gt; (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/expect/dist/index.js:1029:14)
    at Proxy.methodWrapper (file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/chai/chai.js:1618:25)
    at /home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/server/test/apiKeyAuth.middleware.concurrent.test.ts:283:31
    at Array.forEach (&lt;anonymous&gt;)
    at /home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/server/test/apiKeyAuth.middleware.concurrent.test.ts:279:13
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at file:///home/ditto/Documents/work-with-hendra/etl-excel-to-cosmos-db/my-app/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20]]>
      </failure>
    </testCase>
  </file>
  <file path="server/test/apiKeyAuth.middleware.concurrent.test.ts">
    <testCase name="server/test/apiKeyAuth.middleware.concurrent.test.ts - API Key Authentication Middleware - Concurrent Validation - should handle concurrent API key validations" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.concurrent.test.ts - API Key Authentication Middleware - Concurrent Validation - should handle concurrent validation with rate limiting" duration="0" />
  </file>
  <file path="server/test/apiKeyAuth.middleware.error.test.ts">

  </file>
  <file path="server/test/apiKeyAuth.middleware.error.test.ts">
    <testCase name="server/test/apiKeyAuth.middleware.error.test.ts - API Key Authentication Middleware - Error Handling - should handle repository validation errors" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.error.test.ts - API Key Authentication Middleware - Error Handling - should handle invalid API key format in header" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.error.test.ts - API Key Authentication Middleware - Error Handling - should handle empty API key in header" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.error.test.ts - API Key Authentication Middleware - Error Handling - should handle invalid API key in query parameter" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.error.test.ts - API Key Authentication Middleware - Error Handling - should handle expired API key" duration="0" />
    <testCase name="server/test/apiKeyAuth.middleware.error.test.ts - API Key Authentication Middleware - Error Handling - should handle inactive API key" duration="0" />
  </file>
  <file path="server/test/apiKeyAuth.validation.test.ts">

  </file>
  <file path="server/test/apiKeyAuth.validation.test.ts">
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - API Key Format Validation - should reject empty API key" duration="0" />
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - API Key Format Validation - should reject invalid API key format" duration="0" />
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - API Key Verification - should reject non-existent API key" duration="0" />
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - API Key Verification - should reject revoked API key" duration="0" />
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - API Key Verification - should validate active API key" duration="0" />
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - IP Address Validation - should reject request from unauthorized IP" duration="0" />
    <testCase name="server/test/apiKeyAuth.validation.test.ts - API key validation with IP restrictions - IP Address Validation - should allow request from authorized IP" duration="0" />
  </file>
  <file path="server/test/apiKeyRepository.test.ts">

  </file>
  <file path="server/test/apiKeyRepository.test.ts">
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - createApiKey - should create a new API key" duration="0" />
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - update - should update an existing API key" duration="0" />
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - revokeApiKey - should revoke an existing API key" duration="0" />
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - revokeApiKey - should return false for non-existent key" duration="0" />
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - listApiKeys - should list all API keys for a user" duration="0" />
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - validateApiKey - should validate a correct API key" duration="0" />
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - validateApiKey - should respect IP restrictions" duration="0" />
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - createApiKey - should create a new API key" duration="0" />
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - createApiKey - should reject invalid API keys" duration="0" />
    <testCase name="server/test/apiKeyRepository.test.ts - ApiKeyRepository - createApiKey - should respect IP restrictions" duration="0" />
  </file>
  <file path="server/test/apiKeyRevocation.test.ts">
    <testCase name="API Key Revocation - revokeApiKey - should successfully revoke an active API key" duration="30" />
    <testCase name="API Key Revocation - revokeApiKey - should return false when key is not found" duration="6" />
    <testCase name="API Key Revocation - revokeApiKey - should return false when user does not own the key" duration="4" />
    <testCase name="API Key Revocation - revokeApiKey - should handle errors during key revocation" duration="11" />
    <testCase name="API Key Revocation - revokeApiKey - should handle already revoked keys" duration="31" />
  </file>
  <file path="server/test/apiKeyRevocation.test.ts">
    <testCase name="server/test/apiKeyRevocation.test.ts - API Key Revocation - revokeApiKey - should successfully revoke an active API key" duration="0" />
    <testCase name="server/test/apiKeyRevocation.test.ts - API Key Revocation - revokeApiKey - should return false when key is not found" duration="0" />
    <testCase name="server/test/apiKeyRevocation.test.ts - API Key Revocation - revokeApiKey - should return false when user does not own the key" duration="0" />
    <testCase name="server/test/apiKeyRevocation.test.ts - API Key Revocation - revokeApiKey - should handle errors during key revocation" duration="0" />
    <testCase name="server/test/apiKeyRevocation.test.ts - API Key Revocation - revokeApiKey - should handle already revoked keys" duration="0" />
  </file>
  <file path="server/test/apiKeyRoutes.test.ts">

  </file>
  <file path="server/test/apiKeyRoutes.test.ts">

  </file>
  <file path="server/test/apiKeyUtils.test.ts">
    <testCase name="API Key Utilities - generateApiKey - should generate a base64 URL-safe string" duration="17" />
    <testCase name="API Key Utilities - generateApiKey - should generate keys of the specified length" duration="9" />
    <testCase name="API Key Utilities - hashApiKey - should generate a consistent SHA-256 hash" duration="4" />
    <testCase name="API Key Utilities - hashApiKey - should produce different hashes for different keys" duration="4" />
    <testCase name="API Key Utilities - safeCompareKeys - should correctly compare matching keys" duration="1" />
    <testCase name="API Key Utilities - safeCompareKeys - should correctly detect different keys" duration="1" />
    <testCase name="API Key Utilities - safeCompareKeys - should be timing-safe" duration="6" />
    <testCase name="API Key Utilities - safeCompareKeys - should return false for invalid hex strings" duration="1" />
    <testCase name="API Key Utilities - isValidApiKeyFormat - should validate correct API key formats" duration="2" />
    <testCase name="API Key Utilities - isValidApiKeyFormat - should invalidate incorrect API key formats" duration="2" />
    <testCase name="API Key Utilities - generateApiKeyId - should generate a unique ID with timestamp" duration="2" />
  </file>
  <file path="server/test/apiKeyUtils.test.ts">
    <testCase name="server/test/apiKeyUtils.test.ts - API Key Utilities - generateApiKey - should generate a base64 URL-safe string" duration="0" />
    <testCase name="server/test/apiKeyUtils.test.ts - API Key Utilities - generateApiKey - should generate keys of the specified length" duration="0" />
    <testCase name="server/test/apiKeyUtils.test.ts - API Key Utilities - hashApiKey - should generate a consistent SHA-256 hash" duration="0" />
    <testCase name="server/test/apiKeyUtils.test.ts - API Key Utilities - hashApiKey - should produce different hashes for different keys" duration="0" />
    <testCase name="server/test/apiKeyUtils.test.ts - API Key Utilities - safeCompareKeys - should correctly compare matching keys" duration="0" />
    <testCase name="server/test/apiKeyUtils.test.ts - API Key Utilities - safeCompareKeys - should correctly detect different keys" duration="0" />
    <testCase name="server/test/apiKeyUtils.test.ts - API Key Utilities - safeCompareKeys - should be timing-safe" duration="0" />
    <testCase name="server/test/apiKeyUtils.test.ts - API Key Utilities - safeCompareKeys - should return false for invalid hex strings" duration="0" />
    <testCase name="server/test/apiKeyUtils.test.ts - API Key Utilities - isValidApiKeyFormat - should validate correct API key formats" duration="0" />
    <testCase name="server/test/apiKeyUtils.test.ts - API Key Utilities - isValidApiKeyFormat - should invalidate incorrect API key formats" duration="0" />
    <testCase name="server/test/apiKeyUtils.test.ts - API Key Utilities - generateApiKeyId - should generate a unique ID with timestamp" duration="0" />
  </file>
  <file path="server/test/authMiddleware.test.ts">
    <testCase name="Token Validation Middleware - validateToken - should call next() when AUTH_ENABLED is false" duration="55" />
    <testCase name="Token Validation Middleware - validateToken - should return 401 when no token is provided" duration="42" />
    <testCase name="Token Validation Middleware - validateToken - should return 401 when token is invalid" duration="47" />
    <testCase name="Token Validation Middleware - validateToken - should return 401 when token is expired" duration="20" />
    <testCase name="Token Validation Middleware - validateToken - should set req.user and call next() when token is valid" duration="18" />
  </file>
  <file path="server/test/authMiddleware.test.ts">
    <testCase name="server/test/authMiddleware.test.ts - Token Validation Middleware - validateToken - should call next() when AUTH_ENABLED is false" duration="0" />
    <testCase name="server/test/authMiddleware.test.ts - Token Validation Middleware - validateToken - should return 401 when no token is provided" duration="0" />
    <testCase name="server/test/authMiddleware.test.ts - Token Validation Middleware - validateToken - should return 401 when token is invalid" duration="0" />
    <testCase name="server/test/authMiddleware.test.ts - Token Validation Middleware - validateToken - should return 401 when token is expired" duration="0" />
    <testCase name="server/test/authMiddleware.test.ts - Token Validation Middleware - validateToken - should set req.user and call next() when token is valid" duration="0" />
  </file>
  <file path="server/test/data.test.ts">
    <testCase name="Data API - should return data with status 200 when authenticated" duration="677" />
    <testCase name="Data API - should filter data by date range" duration="81" />
    <testCase name="Data API - should filter data by category" duration="67" />
    <testCase name="Data API - should limit results when limit parameter is provided" duration="79" />
  </file>
  <file path="server/test/data.test.ts">
    <testCase name="server/test/data.test.ts - Data API - should return data with status 200 when authenticated" duration="0" />
    <testCase name="server/test/data.test.ts - Data API - should filter data by date range" duration="0" />
    <testCase name="server/test/data.test.ts - Data API - should filter data by category" duration="0" />
    <testCase name="server/test/data.test.ts - Data API - should limit results when limit parameter is provided" duration="0" />
  </file>
  <file path="server/test/excelParser.test.ts">
    <testCase name="Excel Parser - processExcelFile - should successfully process a valid Excel file" duration="58" />
    <testCase name="Excel Parser - processExcelFile - should handle empty Excel files" duration="17" />
    <testCase name="Excel Parser - processExcelFile - should handle parsing errors" duration="64" />
    <testCase name="Excel Parser - processExcelFile - should handle record processing errors gracefully" duration="49" />
  </file>
  <file path="server/test/excelParser.test.ts">
    <testCase name="server/test/excelParser.test.ts - Excel Parser - processExcelFile - should successfully process a valid Excel file" duration="0" />
    <testCase name="server/test/excelParser.test.ts - Excel Parser - processExcelFile - should handle empty Excel files" duration="0" />
    <testCase name="server/test/excelParser.test.ts - Excel Parser - processExcelFile - should handle parsing errors" duration="0" />
    <testCase name="server/test/excelParser.test.ts - Excel Parser - processExcelFile - should handle record processing errors gracefully" duration="0" />
  </file>
  <file path="server/test/rateLimit.test.ts">
    <testCase name="Rate Limiting Middleware - should allow requests under the limit" duration="348" />
    <testCase name="Rate Limiting Middleware - should block requests over the limit" duration="171" />
    <testCase name="Rate Limiting Middleware - should reset the counter after the window expires" duration="246" />
    <testCase name="Rate Limiting Middleware - should use API key as the rate limit key when available" duration="94" />
    <testCase name="Rate Limiting Middleware - should skip rate limiting when skip function returns true" duration="241" />
  </file>
  <file path="server/test/rateLimit.test.ts">
    <testCase name="server/test/rateLimit.test.ts - Rate Limiting Middleware - should allow requests under the limit" duration="0" />
    <testCase name="server/test/rateLimit.test.ts - Rate Limiting Middleware - should block requests over the limit" duration="0" />
    <testCase name="server/test/rateLimit.test.ts - Rate Limiting Middleware - should reset the counter after the window expires" duration="0" />
    <testCase name="server/test/rateLimit.test.ts - Rate Limiting Middleware - should use API key as the rate limit key when available" duration="0" />
    <testCase name="server/test/rateLimit.test.ts - Rate Limiting Middleware - should skip rate limiting when skip function returns true" duration="0" />
  </file>
  <file path="server/test/sanity.test.ts">
    <testCase name="Sanity Test - should pass a basic test" duration="18" />
    <testCase name="Sanity Test - should have access to global test utilities" duration="2" />
    <testCase name="Sanity Test - should have access to Node.js globals" duration="10" />
    <testCase name="Sanity Test - should have access to test environment variables" duration="3" />
  </file>
  <file path="server/test/sanity.test.ts">
    <testCase name="server/test/sanity.test.ts - Sanity Test - should pass a basic test" duration="0" />
    <testCase name="server/test/sanity.test.ts - Sanity Test - should have access to global test utilities" duration="0" />
    <testCase name="server/test/sanity.test.ts - Sanity Test - should have access to Node.js globals" duration="0" />
    <testCase name="server/test/sanity.test.ts - Sanity Test - should have access to test environment variables" duration="0" />
  </file>
  <file path="server/test/server.test.ts">

  </file>
  <file path="server/test/server.test.ts">
    <testCase name="server/test/server.test.ts - Server - Health Check - should return 200 and status ok for /health endpoint" duration="0" />
    <testCase name="server/test/server.test.ts - Server - Health Check - should include environment information in the response" duration="0" />
    <testCase name="server/test/server.test.ts - Server - 404 Handler - should return 404 for non-existent routes" duration="0" />
    <testCase name="server/test/server.test.ts - Server - 404 Handler - should handle various HTTP methods for non-existent routes" duration="0" />
    <testCase name="server/test/server.test.ts - Server - Error Handling - should return 500 for unhandled errors" duration="0" />
  </file>
  <file path="server/test/type-tests/global-types.test.ts">
    <testCase name="Global Type Definitions - should have Node.js globals available" duration="11" />
    <testCase name="Global Type Definitions - should have test globals available" duration="11" />
    <testCase name="Global Type Definitions - should have proper DOM types in frontend files" duration="7" />
  </file>
  <file path="server/test/type-tests/global-types.test.ts">
    <testCase name="server/test/type-tests/global-types.test.ts - Global Type Definitions - should have Node.js globals available" duration="0" />
    <testCase name="server/test/type-tests/global-types.test.ts - Global Type Definitions - should have test globals available" duration="0" />
    <testCase name="server/test/type-tests/global-types.test.ts - Global Type Definitions - should have proper DOM types in frontend files" duration="0" />
  </file>
  <file path="server/test/upload-route.test.ts">
    <testCase name="Upload Handler - uploadHandler - should return 400 if no file is uploaded" duration="34" />
    <testCase name="Upload Handler - uploadHandler - should return 400 if file type is not allowed" duration="13" />
    <testCase name="Upload Handler - uploadHandler - should return 500 if file processing fails" duration="60" />
    <testCase name="Upload Handler - uploadHandler - should return 200 and success message if file is uploaded successfully" duration="37" />
    <testCase name="Upload Handler - uploadHandler - should process a valid Excel file" duration="12" />
    <testCase name="Upload Handler - uploadHandler - should return 401 if user is not authenticated" duration="11" />
  </file>
  <file path="server/test/upload-route.test.ts">
    <testCase name="server/test/upload-route.test.ts - Upload Handler - uploadHandler - should return 400 if no file is uploaded" duration="0" />
    <testCase name="server/test/upload-route.test.ts - Upload Handler - uploadHandler - should return 400 if file type is not allowed" duration="0" />
    <testCase name="server/test/upload-route.test.ts - Upload Handler - uploadHandler - should return 500 if file processing fails" duration="0" />
    <testCase name="server/test/upload-route.test.ts - Upload Handler - uploadHandler - should return 200 and success message if file is uploaded successfully" duration="0" />
    <testCase name="server/test/upload-route.test.ts - Upload Handler - uploadHandler - should process a valid Excel file" duration="0" />
    <testCase name="server/test/upload-route.test.ts - Upload Handler - uploadHandler - should return 401 if user is not authenticated" duration="0" />
  </file>
  <file path="server/test/upload.test.ts">
    <testCase name="Upload Handler - should return 400 if no file is uploaded" duration="53" />
    <testCase name="Upload Handler - should return 200 and process the file when a valid file is uploaded" duration="6" />
  </file>
  <file path="server/test/upload.test.ts">
    <testCase name="server/test/upload.test.ts - Upload Handler - should return 400 if no file is uploaded" duration="0" />
    <testCase name="server/test/upload.test.ts - Upload Handler - should return 200 and process the file when a valid file is uploaded" duration="0" />
  </file>
</testExecutions>